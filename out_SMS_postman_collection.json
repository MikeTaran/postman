{
	"info": {
		"_postman_id": "ce14dc21-1f2a-43ea-b0f4-d6c103f98ef1",
		"name": "(SMS_out_GOIP_Sber) Тестирование API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24214897"
	},
	"item": [
		{
			"name": "нет БИК есть Карты",
			"item": [
				{
					"name": "Исходящие var1",
					"item": [
						{
							"name": "0.1 Обновление статуса 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId}},\r\n    \"status\":1\r\n    //\"incommingTransactionsIsAllowed\":true,\r\n    //\"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "0.2 Обновление статуса 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId2}},\r\n    \"status\":0\r\n    //\"incommingTransactionsIsAllowed\":true,\r\n    //\"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "0.3 Обновление статуса 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId3}},\r\n    \"status\":0\r\n    //\"incommingTransactionsIsAllowed\":true,\r\n    //\"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "0.4 Обновление статуса 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId4}},\r\n    \"status\":0\r\n    //\"incommingTransactionsIsAllowed\":true,\r\n    //\"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.1 Создание исходящей транзакции GoIP Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"20564\",\n    //\"bank\": \"1\", // уже не используется, проверяется bin банка\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2202204218550234\", // сбер\n    // \"customerCard\": \"2200704612896093\", // тинькофф\n    // \"customerCard\": \"2200151333124779\", // альфа\n    // \"customerCard\": \"5169155299849073\", // приват\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3 Привязка Владельцев к Исходящей заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId1}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.4 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"var bank_account_balance = Math.floor(100000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 135000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"СЧЁТ{{owner_bank_account}} {{currentTime}} 08:08 списание 2.01р на вклад Баланс: {{bank_account_balance}}р\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account}} {{currentTime}} перевод {{transaction_sum}}р с комиссией 50р Баланс: {{bank_account_balance}}р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 GoIP Out: Дубль смс",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
											"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"\r",
											"// получаем данные sms\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"   \r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    // берем первый счет\r",
											"    var sms= response.json().data[0].message\r",
											"    pm.environment.set(\"sms_dabl\", sms);\r",
											"\r",
											"    console.log(\"sms_prerequest\", sms)\r",
											"    });\r",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1 Создание исходящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"20564\",\n    //\"bank\": \"1\", // уже не используется, проверяется bin банка\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2202204218550234\", // сбер\n    // \"customerCard\": \"2200704612896093\", // тинькофф\n    // \"customerCard\": \"2200151333124779\", // альфа\n    // \"customerCard\": \"5169155299849073\", // приват\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.3 Привязка Владельцев к Исходящей заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId1}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.4 GoIP Out: № счета в смс совпадает с № счета карты, сумма не совпадает",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(100000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"перевод этому получателю невозможен\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account}} {{currentTime}} перевод 100р с комиссией 0р Баланс: {{bank_account_balance}}р[notification] \",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.5 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3.6 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.7 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":778913,\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "4 GoIP Out: № счета в смс отсутствует у владельца",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(100000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ1001 {{currentTime}} перевод {{transaction_sum}}р с комиссией 50р Баланс: {{bank_account_balance}}р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5 GoIP Out: № счета в смс не совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(100000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account2}} {{currentTime}} перевод {{transaction_sum}}р с комиссией 50р Баланс: {{bank_account_balance}}р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.3 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":778913,\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.4 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"var bank_account_balance = Math.floor(100000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 135000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account}} {{currentTime}} перевод {{transaction_sum}}р с комиссией 50р Баланс: {{bank_account_balance}}р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1 Создание входящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"1\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123002\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(100000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account}} {{currentTime}} перевод {{transaction_sum}}р с комиссией 50р Баланс: {{bank_account_balance}}р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.5 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":778913,\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6 GoIP In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(100000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // входящие\r\n    \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    // \"content\":\"- MIR-0913 15:52 зачисление 133572р Баланс: 164857.47р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						}
					],
					"description": "\\- СЧЁТ1156 06:18 перевод 25000р с комиссией 375р Баланс: 447104р\\[notification\\]"
				},
				{
					"name": "Исходящие var2",
					"item": [
						{
							"name": "1.1 Создание исходящей транзакции GoIP Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"20564\",\n    //\"bank\": \"1\", // уже не используется, проверяется bin банка\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2202204218550234\", // сбер\n    // \"customerCard\": \"2200704612896093\", // тинькофф\n    // \"customerCard\": \"2200151333124779\", // альфа\n    // \"customerCard\": \"5169155299849073\", // приват\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3 Привязка Владельцев к Исходящей заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId1}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.4 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 135000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account}} {{currentTime}} Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\",\r\n    //- СЧЁТ{{owner_bank_account}} {{currentTime}} Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 GoIP Out: Дубль смс",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
											"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"\r",
											"// получаем данные sms\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"   \r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    // берем первый счет\r",
											"    var sms= response.json().data[0].message\r",
											"    pm.environment.set(\"sms_dabl\", sms);\r",
											"\r",
											"    console.log(\"sms_prerequest\", sms)\r",
											"    });\r",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1 Создание исходящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"20564\",\n    //\"bank\": \"1\", // уже не используется, проверяется bin банка\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2202204218550234\", // сбер\n    // \"customerCard\": \"2200704612896093\", // тинькофф\n    // \"customerCard\": \"2200151333124779\", // альфа\n    // \"customerCard\": \"5169155299849073\", // приват\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.3 Привязка Владельцев к Исходящей заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId1}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.4 GoIP Out: № счета в смс совпадает с № счета карты, сумма не совпадает",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account}} {{currentTime}} Оплата 100р Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.5 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"// статус\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											"// входящие\r",
											"if (incommingTransactionsIsAllowed) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"incommingTransactionsIsAllowed\": true })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											"// исходящие\r",
											"if (outcommingTransactionsIsAllowed) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"outcommingTransactionsIsAllowed\": true })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3.6 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners incomTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.7 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners outcomeTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":778913,\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "4 GoIP Out: № счета в смс отсутствует у владельца",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ1001 {{currentTime}} Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5 GoIP Out: № счета в смс не совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account2}} {{currentTime}} Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"// статус\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners status response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners incomTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.3 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners outcomeTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":778913,\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.4 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 135000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account}} {{currentTime}} Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\",\r\n    //- СЧЁТ{{owner_bank_account}} {{currentTime}} Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1 Создание входящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"1\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123002\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account}} {{currentTime}} Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"// статус\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners status response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners incomTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.5 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners outcomeTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":778913,\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6 GoIP In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // входящие\r\n    \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    // \"content\":\"- MIR-0913 15:52 зачисление 133572р Баланс: 164857.47р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						}
					],
					"description": "\\- СЧЁТ9013 04:15 Оплата 470р Баланс: 123979.95р"
				},
				{
					"name": "Исходящие var3",
					"item": [
						{
							"name": "1.1 Создание исходящей транзакции GoIP Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"20564\",\n    //\"bank\": \"1\", // уже не используется, проверяется bin банка\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2202204218550234\", // сбер\n    // \"customerCard\": \"2200704612896093\", // тинькофф\n    // \"customerCard\": \"2200151333124779\", // альфа\n    // \"customerCard\": \"5169155299849073\", // приват\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3 Привязка Владельцев к Исходящей заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId1}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.4 GoIP Out: № карты в смс совпадает с № карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 135000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} перевод {{transaction_sum}}р с комиссией 10р Баланс: {{bank_account_balance}}р[notification]р\",\r\n    //- MIR-3781 {{currentTime}} перевод {{transaction_sum}}р с комиссией 10р Баланс: {{bank_account_balance}}р[notification]\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 GoIP Out: Дубль смс",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
											"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"\r",
											"// получаем данные sms\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"   \r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    // берем первый счет\r",
											"    var sms= response.json().data[0].message\r",
											"    pm.environment.set(\"sms_dabl\", sms);\r",
											"\r",
											"    console.log(\"sms_prerequest\", sms)\r",
											"    });\r",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1 Создание исходящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"20564\",\n    //\"bank\": \"1\", // уже не используется, проверяется bin банка\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2202204218550234\", // сбер\n    // \"customerCard\": \"2200704612896093\", // тинькофф\n    // \"customerCard\": \"2200151333124779\", // альфа\n    // \"customerCard\": \"5169155299849073\", // приват\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.3 Привязка Владельцев к Исходящей заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId1}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.4 GoIP Out: № карты в смс совпадает с № карты, сумма не совпадает",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} перевод 350р с комиссией 10р Баланс: {{bank_account_balance}}р[notification]р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.5 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"// статус\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											"// входящие\r",
											"if (incommingTransactionsIsAllowed) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"incommingTransactionsIsAllowed\": true })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											"// исходящие\r",
											"if (outcommingTransactionsIsAllowed) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"outcommingTransactionsIsAllowed\": true })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3.6 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners incomTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.7 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners outcomeTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":778913,\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "4 GoIP Out: № карты в смс отсутствует у владельца",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- MIR-1001 {{currentTime}} перевод {{transaction_sum}}р с комиссией 10р Баланс: {{bank_account_balance}}р[notification]р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5 GoIP Out: № карты смс не совпадает с № карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 135000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- MIR-{{owner_bank_card2}} {{currentTime}} перевод {{transaction_sum}}р с комиссией 10р Баланс: {{bank_account_balance}}р[notification]р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1 Создание входящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"1\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123002\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2 GoIP Out: № карты в смс совпадает с № карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} перевод {{transaction_sum}}р с комиссией 10р Баланс: {{bank_account_balance}}р[notification]р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"// статус\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners status response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners incomTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.5 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners outcomeTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":778913,\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6 GoIP In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // входящие\r\n    \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    // \"content\":\"- MIR-0913 15:52 зачисление 133572р Баланс: 164857.47р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						}
					],
					"description": "\\- MIR-3781 06:09 перевод 40000р с комиссией 600р Баланс: 14538р\\[notification\\]"
				},
				{
					"name": "Исходящие var4",
					"item": [
						{
							"name": "1.1 Создание исходящей транзакции GoIP Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"20564\",\n    //\"bank\": \"1\", // уже не используется, проверяется bin банка\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2202204218550234\", // сбер\n    // \"customerCard\": \"2200704612896093\", // тинькофф\n    // \"customerCard\": \"2200151333124779\", // альфа\n    // \"customerCard\": \"5169155299849073\", // приват\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3 Привязка Владельцев к Исходящей заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId1}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.4 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж, сумма платежа +2% и + 0,01р",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// 2% комиссия\r",
											"const commissionRate = 0.02;\r",
											"const commission = transaction_sum * commissionRate;\r",
											"const roundedCommission = Math.floor(commission * 100) / 100;\r",
											"transaction_sum_2 = transaction_sum + roundedCommission +0.05;\r",
											"console.log(\"SMS transaction sum_2:\", transaction_sum_2)\r",
											"pm.environment.set(\"transaction_sum_2\", transaction_sum_2);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    \"content\":\"СЧЁТ{{owner_bank_account}} {{currentTime}}  Оплата {{transaction_sum_2}}р Баланс: {{bank_account_balance}}р\",\r\n    // \"content\":\"- СЧЁТ{{owner_bank_account}} {{currentTime}} перевод {{transaction_sum}}р с комиссией 50р Баланс: {{bank_account_balance}}р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.5 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1.6 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.7 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":778913,\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.8 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж, сумма платежа +2%",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// 2% комиссия\r",
											"const commissionRate = 0.02;\r",
											"const commission = transaction_sum * commissionRate;\r",
											"const roundedCommission = Math.floor(commission * 100) / 100;\r",
											"transaction_sum_2 = transaction_sum + roundedCommission;\r",
											"console.log(\"SMS transaction sum_2:\", transaction_sum_2)\r",
											"pm.environment.set(\"transaction_sum_2\", transaction_sum_2);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 135000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ{{owner_bank_account}} {{currentTime}}  Оплата {{transaction_sum_2}}р Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 GoIP Out: Дубль смс",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
											"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"\r",
											"// получаем данные sms\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"   \r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    // берем первый счет\r",
											"    var sms= response.json().data[0].message\r",
											"    pm.environment.set(\"sms_dabl\", sms);\r",
											"\r",
											"    console.log(\"sms_prerequest\", sms)\r",
											"    });\r",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1 Создание исходящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"20564\",\n    //\"bank\": \"1\", // уже не используется, проверяется bin банка\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2202204218550234\", // сбер\n    // \"customerCard\": \"2200704612896093\", // тинькофф\n    // \"customerCard\": \"2200151333124779\", // альфа\n    // \"customerCard\": \"5169155299849073\", // приват\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.3 Привязка Владельцев к Исходящей заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId1}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.4 GoIP Out: № счета в смс совпадает с № счета карты, сумма не совпадает",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ{{owner_bank_account}} {{currentTime}}  Оплата 100р Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.5 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3.6 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.7 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":778913,\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "4 GoIP Out: № счета в смс отсутствует у владельца",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ1001 {{currentTime}}  Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5 GoIP Out: № счета в смс не совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ{{owner_bank_account2}} {{currentTime}}  Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.3 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":778913,\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.4 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж, сумма платежа +2%",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// 2% комиссия\r",
											"const commissionRate = 0.02;\r",
											"const commission = transaction_sum * commissionRate;\r",
											"const roundedCommission = Math.floor(commission * 100) / 100;\r",
											"transaction_sum_2 = transaction_sum + roundedCommission;\r",
											"console.log(\"SMS transaction sum_2:\", transaction_sum_2)\r",
											"pm.environment.set(\"transaction_sum_2\", transaction_sum_2);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 135000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ{{owner_bank_account}} {{currentTime}}  Оплата {{transaction_sum_2}}р Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1 Создание входящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"1\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123002\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ{{owner_bank_account}} {{currentTime}}  Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.5 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":778913,\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6 GoIP In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // входящие\r\n    // \"content\":\"СЧЁТ{{owner_bank_account}} {{currentTime}}  Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\",\r\n    \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						}
					],
					"description": "СЧЁТ5177 12:03 Оплата 130р Баланс: 49 720.83р +2% комиссии банка"
				},
				{
					"name": "Исходящие var5",
					"item": [
						{
							"name": "1.1 Создание исходящей транзакции GoIP Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"20564\",\n    //\"bank\": \"1\", // уже не используется, проверяется bin банка\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2202204218550234\", // сбер\n    // \"customerCard\": \"2200704612896093\", // тинькофф\n    // \"customerCard\": \"2200151333124779\", // альфа\n    // \"customerCard\": \"5169155299849073\", // приват\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3 Привязка Владельцев к Исходящей заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId1}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.4 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 135000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ{{owner_bank_account}} {{currentTime}} списание {{transaction_sum}}р на вклад Баланс: {{bank_account_balance}}р\",\r\n    //- СЧЁТ{{owner_bank_account}} {{currentTime}} Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 GoIP Out: Дубль смс",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
											"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"\r",
											"// получаем данные sms\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"   \r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    // берем первый счет\r",
											"    var sms= response.json().data[0].message\r",
											"    pm.environment.set(\"sms_dabl\", sms);\r",
											"\r",
											"    console.log(\"sms_prerequest\", sms)\r",
											"    });\r",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1 Создание исходящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"20564\",\n    //\"bank\": \"1\", // уже не используется, проверяется bin банка\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2202204218550234\", // сбер\n    // \"customerCard\": \"2200704612896093\", // тинькофф\n    // \"customerCard\": \"2200151333124779\", // альфа\n    // \"customerCard\": \"5169155299849073\", // приват\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.3 Привязка Владельцев к Исходящей заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId1}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.4 GoIP Out: № счета в смс совпадает с № счета карты, сумма не совпадает",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ{{owner_bank_account}} {{currentTime}} списание 100р на вклад Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.5 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"// статус\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											"// входящие\r",
											"if (incommingTransactionsIsAllowed) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"incommingTransactionsIsAllowed\": true })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											"// исходящие\r",
											"if (outcommingTransactionsIsAllowed) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"outcommingTransactionsIsAllowed\": true })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3.6 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners incomTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.7 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners outcomeTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":778913,\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "4 GoIP Out: № счета в смс отсутствует у владельца",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ1001 {{currentTime}} списание {{transaction_sum}}р на вклад Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5 GoIP Out: № счета в смс не совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ{{owner_bank_account2}} {{currentTime}} списание {{transaction_sum}}р на вклад Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"// статус\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners status response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners incomTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.3 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners outcomeTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":778913,\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.4 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 135000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ{{owner_bank_account}} {{currentTime}} списание {{transaction_sum}}р на вклад Баланс: {{bank_account_balance}}р\",\r\n    //- СЧЁТ{{owner_bank_account}} {{currentTime}} Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1 Создание входящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"1\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123002\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ{{owner_bank_account}} {{currentTime}} списание {{transaction_sum}}р на вклад Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"// статус\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners status response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners incomTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.5 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners outcomeTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":778913,\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6 GoIP In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // входящие\r\n    \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    // \"content\":\"- MIR-0913 15:52 зачисление 133572р Баланс: 164857.47р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						}
					],
					"description": "СЧЁТ8913 16:04 списание 512.25р на вклад Баланс: 50 770.50р"
				},
				{
					"name": "Исходящие смс Отмена",
					"item": [
						{
							"name": "1.1 Создание исходящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"20564\",\n    //\"bank\": \"1\", // уже не используется, проверяется bin банка\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2202204218550234\", // сбер\n    // \"customerCard\": \"2200704612896093\", // тинькофф\n    // \"customerCard\": \"2200151333124779\", // альфа\n    // \"customerCard\": \"5169155299849073\", // приват\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3 Привязка Владельцев к Исходящей заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId1}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.4 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account}} {{currentTime}} перевод {{transaction_sum}}р с комиссией 50р Баланс: {{bank_account_balance}}р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 GoIP Out: Исходящие смс Отмена",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(5);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- СЧЁТ{{owner_bank_account}} {{currentTime}} отмена перевода {{transaction_sum}}р с комиссией 50р Баланс: 14758.40р[notification]\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account}} {{currentTime}} отмена перевода {{transaction_sum}}р с комиссией 50р Баланс: {{bank_account_balance}}р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						}
					],
					"description": "\\- СЧЁТ2678 11:14 отмена перевода 10000р с комиссией 150р Баланс: 14758.40р\\[notification\\]"
				}
			]
		},
		{
			"name": "есть БИК есть Карты",
			"item": [
				{
					"name": "Исходящие var1",
					"item": [
						{
							"name": "0.1 Обновление статуса 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId}},\r\n    \"status\":0\r\n    //\"incommingTransactionsIsAllowed\":true,\r\n    //\"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "0.2 Обновление статуса 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId2}},\r\n    \"status\":1\r\n    //\"incommingTransactionsIsAllowed\":true,\r\n    //\"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "0.3 Обновление статуса 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId3}},\r\n    \"status\":0\r\n    //\"incommingTransactionsIsAllowed\":true,\r\n    //\"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "0.4 Обновление статуса 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId4}},\r\n    \"status\":0\r\n    //\"incommingTransactionsIsAllowed\":true,\r\n    //\"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.1 Создание исходящей транзакции GoIP Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"20564\",\n    //\"bank\": \"1\", // уже не используется, проверяется bin банка\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2202204218550234\", // сбер\n    // \"customerCard\": \"2200704612896093\", // тинькофф\n    // \"customerCard\": \"2200151333124779\", // альфа\n    // \"customerCard\": \"5169155299849073\", // приват\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3 Привязка Владельцев к Исходящей заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId2}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId1_2}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.4 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 135000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"СЧЁТ{{owner_bank_account}} {{currentTime}} 08:08 списание 2.01р на вклад Баланс: {{bank_account_balance}}р\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account_2}} {{currentTime}} перевод {{transaction_sum}}р с комиссией 50р Баланс: {{bank_account_balance}}р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 GoIP Out: Дубль смс",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
											"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"\r",
											"// получаем данные sms\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"   \r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    // берем первый счет\r",
											"    var sms= response.json().data[0].message\r",
											"    pm.environment.set(\"sms_dabl\", sms);\r",
											"\r",
											"    console.log(\"sms_prerequest\", sms)\r",
											"    });\r",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1 Создание исходящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"20564\",\n    //\"bank\": \"1\", // уже не используется, проверяется bin банка\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2202204218550234\", // сбер\n    // \"customerCard\": \"2200704612896093\", // тинькофф\n    // \"customerCard\": \"2200151333124779\", // альфа\n    // \"customerCard\": \"5169155299849073\", // приват\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.3 Привязка Владельцев к Исходящей заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId2}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId1_2}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.4 GoIP Out: № счета в смс совпадает с № счета карты, сумма не совпадает",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account_2}} {{currentTime}} перевод 100р с комиссией 0р Баланс: {{bank_account_balance}}р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.5 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId2\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3.6 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId2}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.7 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId2}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "4 GoIP Out: № счета в смс отсутствует у владельца",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(100000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ1001 {{currentTime}} перевод {{transaction_sum}}р с комиссией 50р Баланс: {{bank_account_balance}}р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5 GoIP Out: № счета в смс не совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(20000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account2_2}} {{currentTime}} перевод {{transaction_sum}}р с комиссией 50р Баланс: {{bank_account_balance}}р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId2\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId2}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.3 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId2}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.4 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"var bank_account_balance = Math.floor(100000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 135000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account_2}} {{currentTime}} перевод {{transaction_sum}}р с комиссией 50р Баланс: {{bank_account_balance}}р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1 Создание входящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"1\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123002\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(100000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account_2}} {{currentTime}} перевод {{transaction_sum}}р с комиссией 50р Баланс: {{bank_account_balance}}р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId2\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId2}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.5 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId2}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6 GoIP In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(100000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // входящие\r\n    \"content\":\"- Перевод из Альфа Банк +{{transaction_sum}}р от ПЕТР П. СЧЁТ{{owner_bank_account_2}} — Баланс: {{bank_account_balance}}р 'Перевод денежных средств'\",\r\n    // \"content\":\"- MIR-0913 15:52 зачисление 133572р Баланс: 164857.47р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						}
					],
					"description": "\\- СЧЁТ1156 06:18 перевод 25000р с комиссией 375р Баланс: 447104р\\[notification\\]"
				},
				{
					"name": "Исходящие var2",
					"item": [
						{
							"name": "1.1 Создание исходящей транзакции GoIP Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"20564\",\n    //\"bank\": \"1\", // уже не используется, проверяется bin банка\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2202204218550234\", // сбер\n    // \"customerCard\": \"2200704612896093\", // тинькофф\n    // \"customerCard\": \"2200151333124779\", // альфа\n    // \"customerCard\": \"5169155299849073\", // приват\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3 Привязка Владельцев к Исходящей заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId2}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId1_2}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.4 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 135000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account_2}} {{currentTime}} Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\",\r\n    //- СЧЁТ{{owner_bank_account}} {{currentTime}} Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 GoIP Out: Дубль смс",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
											"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"\r",
											"// получаем данные sms\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"   \r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    // берем первый счет\r",
											"    var sms= response.json().data[0].message\r",
											"    pm.environment.set(\"sms_dabl\", sms);\r",
											"\r",
											"    console.log(\"sms_prerequest\", sms)\r",
											"    });\r",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1 Создание исходящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"20564\",\n    //\"bank\": \"1\", // уже не используется, проверяется bin банка\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2202204218550234\", // сбер\n    // \"customerCard\": \"2200704612896093\", // тинькофф\n    // \"customerCard\": \"2200151333124779\", // альфа\n    // \"customerCard\": \"5169155299849073\", // приват\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.3 Привязка Владельцев к Исходящей заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId2}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId1_2}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.4 GoIP Out: № счета в смс совпадает с № счета карты, сумма не совпадает",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account_2}} {{currentTime}} Оплата 100р Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.5 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId2\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"// статус\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											"// входящие\r",
											"if (incommingTransactionsIsAllowed) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"incommingTransactionsIsAllowed\": true })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											"// исходящие\r",
											"if (outcommingTransactionsIsAllowed) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"outcommingTransactionsIsAllowed\": true })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3.6 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners incomTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId2}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.7 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners outcomeTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId2}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "4 GoIP Out: № счета в смс отсутствует у владельца",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ1001 {{currentTime}} Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5 GoIP Out: № счета в смс не совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(20000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account2_2}} {{currentTime}} Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId2\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"// статус\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners status response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners incomTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId2}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.3 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners outcomeTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId2}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.4 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 135000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account_2}} {{currentTime}} Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\",\r\n    //- СЧЁТ{{owner_bank_account}} {{currentTime}} Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1 Создание входящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"1\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123002\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account_2}} {{currentTime}} Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId2\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"// статус\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners status response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners incomTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId2}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.5 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners outcomeTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId2}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6 GoIP In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // входящие\r\n    \"content\":\"- Перевод из Альфа Банк +{{transaction_sum}}р от ПЕТР П. СЧЁТ{{owner_bank_account_2}} — Баланс: {{bank_account_balance}}р 'Перевод денежных средств'\",\r\n    // \"content\":\"- MIR-0913 15:52 зачисление 133572р Баланс: 164857.47р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						}
					],
					"description": "\\- СЧЁТ9013 04:15 Оплата 470р Баланс: 123979.95р"
				},
				{
					"name": "Исходящие var3",
					"item": [
						{
							"name": "1.1 Создание исходящей транзакции GoIP Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"20564\",\n    //\"bank\": \"1\", // уже не используется, проверяется bin банка\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2202204218550234\", // сбер\n    // \"customerCard\": \"2200704612896093\", // тинькофф\n    // \"customerCard\": \"2200151333124779\", // альфа\n    // \"customerCard\": \"5169155299849073\", // приват\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3 Привязка Владельцев к Исходящей заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId2}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId1_2}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.4 GoIP Out: № карты в смс совпадает с № карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 135000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} перевод {{transaction_sum}}р с комиссией 10р Баланс: {{bank_account_balance}}р[notification]р\",\r\n    //- MIR-3781 {{currentTime}} перевод {{transaction_sum}}р с комиссией 10р Баланс: {{bank_account_balance}}р[notification]\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 GoIP Out: Дубль смс",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
											"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"\r",
											"// получаем данные sms\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"   \r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    // берем первый счет\r",
											"    var sms= response.json().data[0].message\r",
											"    pm.environment.set(\"sms_dabl\", sms);\r",
											"\r",
											"    console.log(\"sms_prerequest\", sms)\r",
											"    });\r",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1 Создание исходящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"20564\",\n    //\"bank\": \"1\", // уже не используется, проверяется bin банка\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2202204218550234\", // сбер\n    // \"customerCard\": \"2200704612896093\", // тинькофф\n    // \"customerCard\": \"2200151333124779\", // альфа\n    // \"customerCard\": \"5169155299849073\", // приват\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.3 Привязка Владельцев к Исходящей заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId2}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId1_2}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.4 GoIP Out: № карты в смс совпадает с № карты, сумма не совпадает",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} перевод 350р с комиссией 10р Баланс: {{bank_account_balance}}р[notification]р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.5 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId2\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"// статус\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											"// входящие\r",
											"if (incommingTransactionsIsAllowed) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"incommingTransactionsIsAllowed\": true })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											"// исходящие\r",
											"if (outcommingTransactionsIsAllowed) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"outcommingTransactionsIsAllowed\": true })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3.6 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners incomTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId2}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.7 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners outcomeTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId2}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "4 GoIP Out: № карты в смс отсутствует у владельца",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- MIR-1001 {{currentTime}} перевод {{transaction_sum}}р с комиссией 10р Баланс: {{bank_account_balance}}р[notification]р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5 GoIP Out: № карты смс не совпадает с № карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 135000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- MIR-{{owner_bank_card2}} {{currentTime}} перевод {{transaction_sum}}р с комиссией 10р Баланс: {{bank_account_balance}}р[notification]р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1 Создание входящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"1\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123002\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2 GoIP Out: № карты в смс совпадает с № карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} перевод {{transaction_sum}}р с комиссией 10р Баланс: {{bank_account_balance}}р[notification]р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId2\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"// статус\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners status response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners incomTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId2}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.5 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners outcomeTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId2}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6 GoIP In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // входящие\r\n    \"content\":\"- Перевод из Альфа Банк +{{transaction_sum}}р от ПЕТР П. СЧЁТ{{owner_bank_account_2}} — Баланс: {{bank_account_balance}}р 'Перевод денежных средств'\",\r\n    // \"content\":\"- MIR-0913 15:52 зачисление 133572р Баланс: 164857.47р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						}
					],
					"description": "\\- MIR-3781 06:09 перевод 40000р с комиссией 600р Баланс: 14538р\\[notification\\]"
				},
				{
					"name": "Исходящие var4",
					"item": [
						{
							"name": "1.1 Создание исходящей транзакции GoIP Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"20564\",\n    //\"bank\": \"1\", // уже не используется, проверяется bin банка\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2202204218550234\", // сбер\n    // \"customerCard\": \"2200704612896093\", // тинькофф\n    // \"customerCard\": \"2200151333124779\", // альфа\n    // \"customerCard\": \"5169155299849073\", // приват\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3 Привязка Владельцев к Исходящей заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId2}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId1_2}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.4 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж, сумма платежа +2% и + 0,01р",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// 2% комиссия\r",
											"const commissionRate = 0.02;\r",
											"const commission = transaction_sum * commissionRate;\r",
											"const roundedCommission = Math.floor(commission * 100) / 100;\r",
											"transaction_sum_2 = transaction_sum + roundedCommission +0.05;\r",
											"console.log(\"SMS transaction sum_2:\", transaction_sum_2)\r",
											"pm.environment.set(\"transaction_sum_2\", transaction_sum_2);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    \"content\":\"СЧЁТ{{owner_bank_account_2}} {{currentTime}}  Оплата {{transaction_sum_2}}р Баланс: {{bank_account_balance}}р\",\r\n    // \"content\":\"- СЧЁТ{{owner_bank_account}} {{currentTime}} перевод {{transaction_sum}}р с комиссией 50р Баланс: {{bank_account_balance}}р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.5 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId2\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1.6 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId2}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.7 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId2}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.8 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж, сумма платежа +2%",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// 2% комиссия\r",
											"const commissionRate = 0.02;\r",
											"const commission = transaction_sum * commissionRate;\r",
											"const roundedCommission = Math.floor(commission * 100) / 100;\r",
											"transaction_sum_2 = transaction_sum + roundedCommission;\r",
											"console.log(\"SMS transaction sum_2:\", transaction_sum_2)\r",
											"pm.environment.set(\"transaction_sum_2\", transaction_sum_2);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 135000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ{{owner_bank_account_2}} {{currentTime}}  Оплата {{transaction_sum_2}}р Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 GoIP Out: Дубль смс",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
											"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"\r",
											"// получаем данные sms\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"   \r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    // берем первый счет\r",
											"    var sms= response.json().data[0].message\r",
											"    pm.environment.set(\"sms_dabl\", sms);\r",
											"\r",
											"    console.log(\"sms_prerequest\", sms)\r",
											"    });\r",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1 Создание исходящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"20564\",\n    //\"bank\": \"1\", // уже не используется, проверяется bin банка\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2202204218550234\", // сбер\n    // \"customerCard\": \"2200704612896093\", // тинькофф\n    // \"customerCard\": \"2200151333124779\", // альфа\n    // \"customerCard\": \"5169155299849073\", // приват\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.3 Привязка Владельцев к Исходящей заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId2}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId1_2}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.4 GoIP Out: № счета в смс совпадает с № счета карты, сумма не совпадает",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ{{owner_bank_account_2}} {{currentTime}}  Оплата 100р Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.5 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId2\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3.6 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId2}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.7 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId2}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "4 GoIP Out: № счета в смс отсутствует у владельца",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ1001 {{currentTime}}  Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5 GoIP Out: № счета в смс не совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(20000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ{{owner_bank_account2_2}} {{currentTime}}  Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId2\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId2}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.3 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId2}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.4 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж, сумма платежа +2%",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// 2% комиссия\r",
											"const commissionRate = 0.02;\r",
											"const commission = transaction_sum * commissionRate;\r",
											"const roundedCommission = Math.floor(commission * 100) / 100;\r",
											"transaction_sum_2 = transaction_sum + roundedCommission;\r",
											"console.log(\"SMS transaction sum_2:\", transaction_sum_2)\r",
											"pm.environment.set(\"transaction_sum_2\", transaction_sum_2);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 135000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ{{owner_bank_account_2}} {{currentTime}}  Оплата {{transaction_sum_2}}р Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1 Создание входящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"1\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123002\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ{{owner_bank_account_2}} {{currentTime}}  Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId2\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId2}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.5 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId2}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6 GoIP In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // входящие\r\n    // \"content\":\"СЧЁТ{{owner_bank_account}} {{currentTime}}  Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\",\r\n    \"content\":\"- Перевод из Альфа Банк +{{transaction_sum}}р от ПЕТР П. СЧЁТ{{owner_bank_account_2}} — Баланс: {{bank_account_balance}}р 'Перевод денежных средств'\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						}
					],
					"description": "СЧЁТ5177 12:03 Оплата 130р Баланс: 49 720.83р +2% комиссии банка"
				},
				{
					"name": "Исходящие var5",
					"item": [
						{
							"name": "1.1 Создание исходящей транзакции GoIP Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"20564\",\n    //\"bank\": \"1\", // уже не используется, проверяется bin банка\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2202204218550234\", // сбер\n    // \"customerCard\": \"2200704612896093\", // тинькофф\n    // \"customerCard\": \"2200151333124779\", // альфа\n    // \"customerCard\": \"5169155299849073\", // приват\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3 Привязка Владельцев к Исходящей заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId2}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId1_2}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.4 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 135000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ{{owner_bank_account_2}} {{currentTime}} списание {{transaction_sum}}р на вклад Баланс: {{bank_account_balance}}р\",\r\n    //- СЧЁТ{{owner_bank_account}} {{currentTime}} Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 GoIP Out: Дубль смс",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
											"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"\r",
											"// получаем данные sms\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"   \r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    // берем первый счет\r",
											"    var sms= response.json().data[0].message\r",
											"    pm.environment.set(\"sms_dabl\", sms);\r",
											"\r",
											"    console.log(\"sms_prerequest\", sms)\r",
											"    });\r",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1 Создание исходящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"20564\",\n    //\"bank\": \"1\", // уже не используется, проверяется bin банка\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2202204218550234\", // сбер\n    // \"customerCard\": \"2200704612896093\", // тинькофф\n    // \"customerCard\": \"2200151333124779\", // альфа\n    // \"customerCard\": \"5169155299849073\", // приват\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.3 Привязка Владельцев к Исходящей заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId2}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId1_2}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.4 GoIP Out: № счета в смс совпадает с № счета карты, сумма не совпадает",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ{{owner_bank_account_2}} {{currentTime}} списание 100р на вклад Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.5 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId2\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"// статус\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											"// входящие\r",
											"if (incommingTransactionsIsAllowed) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"incommingTransactionsIsAllowed\": true })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											"// исходящие\r",
											"if (outcommingTransactionsIsAllowed) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"outcommingTransactionsIsAllowed\": true })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3.6 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners incomTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId2}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.7 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners outcomeTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId2}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "4 GoIP Out: № счета в смс отсутствует у владельца",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ1001 {{currentTime}} списание {{transaction_sum}}р на вклад Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5 GoIP Out: № счета в смс не совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(20000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ{{owner_bank_account2_2}} {{currentTime}} списание {{transaction_sum}}р на вклад Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId2\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"// статус\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners status response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners incomTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId2}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.3 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners outcomeTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId2}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.4 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 135000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ{{owner_bank_account_2}} {{currentTime}} списание {{transaction_sum}}р на вклад Баланс: {{bank_account_balance}}р\",\r\n    //- СЧЁТ{{owner_bank_account}} {{currentTime}} Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1 Создание входящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"1\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123002\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ{{owner_bank_account_2}} {{currentTime}} списание {{transaction_sum}}р на вклад Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId2\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"// статус\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners status response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId2}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners incomTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId2}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.5 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners outcomeTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId2}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6 GoIP In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // входящие\r\n    \"content\":\"- Перевод из Альфа Банк +{{transaction_sum}}р от ПЕТР П. СЧЁТ{{owner_bank_account_2}} — Баланс: {{bank_account_balance}}р 'Перевод денежных средств'\",\r\n    // \"content\":\"- MIR-0913 15:52 зачисление 133572р Баланс: 164857.47р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						}
					],
					"description": "СЧЁТ8913 16:04 списание 512.25р на вклад Баланс: 50 770.50р"
				},
				{
					"name": "Исходящие смс Отмена",
					"item": [
						{
							"name": "1.1 Создание исходящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"20564\",\n    //\"bank\": \"1\", // уже не используется, проверяется bin банка\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2202204218550234\", // сбер\n    // \"customerCard\": \"2200704612896093\", // тинькофф\n    // \"customerCard\": \"2200151333124779\", // альфа\n    // \"customerCard\": \"5169155299849073\", // приват\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3 Привязка Владельцев к Исходящей заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId2}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId1_2}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.4 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account_2}} {{currentTime}} перевод {{transaction_sum}}р с комиссией 50р Баланс: {{bank_account_balance}}р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 GoIP Out: Исходящие смс Отмена",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId2\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(5);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- СЧЁТ{{owner_bank_account}} {{currentTime}} отмена перевода {{transaction_sum}}р с комиссией 50р Баланс: 14758.40р[notification]\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account_2}} {{currentTime}} отмена перевода {{transaction_sum}}р с комиссией 50р Баланс: {{bank_account_balance}}р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						}
					],
					"description": "\\- СЧЁТ2678 11:14 отмена перевода 10000р с комиссией 150р Баланс: 14758.40р\\[notification\\]"
				}
			]
		},
		{
			"name": "есть БИК нет Карт",
			"item": [
				{
					"name": "Исходящие var1",
					"item": [
						{
							"name": "0.1 Обновление статуса 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId}},\r\n    \"status\":0\r\n    //\"incommingTransactionsIsAllowed\":true,\r\n    //\"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "0.2 Обновление статуса 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId2}},\r\n    \"status\":0\r\n    //\"incommingTransactionsIsAllowed\":true,\r\n    //\"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "0.3 Обновление статуса 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId3}},\r\n    \"status\":1\r\n    //\"incommingTransactionsIsAllowed\":true,\r\n    //\"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "0.4 Обновление статуса 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId4}},\r\n    \"status\":0\r\n    //\"incommingTransactionsIsAllowed\":true,\r\n    //\"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.1 Создание исходящей транзакции GoIP Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"20564\",\n    //\"bank\": \"1\", // уже не используется, проверяется bin банка\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2202204218550234\", // сбер\n    // \"customerCard\": \"2200704612896093\", // тинькофф\n    // \"customerCard\": \"2200151333124779\", // альфа\n    // \"customerCard\": \"5169155299849073\", // приват\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3 Привязка Владельцев к Исходящей заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId3}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId1_3}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.4 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 135000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line3}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"СЧЁТ{{owner_bank_account}} {{currentTime}} 08:08 списание 2.01р на вклад Баланс: {{bank_account_balance}}р\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account_3}} {{currentTime}} перевод {{transaction_sum}}р с комиссией 50р Баланс: {{bank_account_balance}}р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 GoIP Out: Дубль смс",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
											"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"\r",
											"// получаем данные sms\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"   \r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    // берем первый счет\r",
											"    var sms= response.json().data[0].message\r",
											"    pm.environment.set(\"sms_dabl\", sms);\r",
											"\r",
											"    console.log(\"sms_prerequest\", sms)\r",
											"    });\r",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line3}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1 Создание исходящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"20564\",\n    //\"bank\": \"1\", // уже не используется, проверяется bin банка\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2202204218550234\", // сбер\n    // \"customerCard\": \"2200704612896093\", // тинькофф\n    // \"customerCard\": \"2200151333124779\", // альфа\n    // \"customerCard\": \"5169155299849073\", // приват\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.3 Привязка Владельцев к Исходящей заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId3}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId1_3}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.4 GoIP Out: № счета в смс совпадает с № счета карты, сумма не совпадает",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line3}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account_3}} {{currentTime}} перевод 100р с комиссией 0р Баланс: {{bank_account_balance}}р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.5 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId3\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId3}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId3}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3.6 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId3}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.7 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId3}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "4 GoIP Out: № счета в смс отсутствует у владельца",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(100000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line3}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ1001 {{currentTime}} перевод {{transaction_sum}}р с комиссией 50р Баланс: {{bank_account_balance}}р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5 GoIP Out: № счета в смс не совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(20000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line3}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account2_3}} {{currentTime}} перевод {{transaction_sum}}р с комиссией 50р Баланс: {{bank_account_balance}}р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId3\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId3}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId3}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId3}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.3 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId3}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.4 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"var bank_account_balance = Math.floor(100000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 135000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line3}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account_3}} {{currentTime}} перевод {{transaction_sum}}р с комиссией 50р Баланс: {{bank_account_balance}}р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1 Создание входящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"1\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123002\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(100000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line3}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account_3}} {{currentTime}} перевод {{transaction_sum}}р с комиссией 50р Баланс: {{bank_account_balance}}р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId3\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId3}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId3}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId3}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.5 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId3}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6 GoIP In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(100000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line3}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // входящие\r\n    \"content\":\"- Перевод из Альфа Банк +{{transaction_sum}}р от ПЕТР П. СЧЁТ{{owner_bank_account_3}} — Баланс: {{bank_account_balance}}р 'Перевод денежных средств'\",\r\n    // \"content\":\"- MIR-0913 15:52 зачисление 133572р Баланс: 164857.47р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						}
					],
					"description": "\\- СЧЁТ1156 06:18 перевод 25000р с комиссией 375р Баланс: 447104р\\[notification\\]"
				},
				{
					"name": "Исходящие var2",
					"item": [
						{
							"name": "1.1 Создание исходящей транзакции GoIP Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"20564\",\n    //\"bank\": \"1\", // уже не используется, проверяется bin банка\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2202204218550234\", // сбер\n    // \"customerCard\": \"2200704612896093\", // тинькофф\n    // \"customerCard\": \"2200151333124779\", // альфа\n    // \"customerCard\": \"5169155299849073\", // приват\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3 Привязка Владельцев к Исходящей заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId3}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId1_3}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.4 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 135000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line3}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account_3}} {{currentTime}} Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\",\r\n    //- СЧЁТ{{owner_bank_account}} {{currentTime}} Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 GoIP Out: Дубль смс",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
											"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"\r",
											"// получаем данные sms\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"   \r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    // берем первый счет\r",
											"    var sms= response.json().data[0].message\r",
											"    pm.environment.set(\"sms_dabl\", sms);\r",
											"\r",
											"    console.log(\"sms_prerequest\", sms)\r",
											"    });\r",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line3}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1 Создание исходящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"20564\",\n    //\"bank\": \"1\", // уже не используется, проверяется bin банка\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2202204218550234\", // сбер\n    // \"customerCard\": \"2200704612896093\", // тинькофф\n    // \"customerCard\": \"2200151333124779\", // альфа\n    // \"customerCard\": \"5169155299849073\", // приват\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.3 Привязка Владельцев к Исходящей заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId3}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId1_3}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.4 GoIP Out: № счета в смс совпадает с № счета карты, сумма не совпадает",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line3}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account_3}} {{currentTime}} Оплата 100р Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.5 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId3\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"// статус\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											"// входящие\r",
											"if (incommingTransactionsIsAllowed) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"incommingTransactionsIsAllowed\": true })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											"// исходящие\r",
											"if (outcommingTransactionsIsAllowed) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"outcommingTransactionsIsAllowed\": true })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId3}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId3}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3.6 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners incomTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId3}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.7 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners outcomeTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId3}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "4 GoIP Out: № счета в смс отсутствует у владельца",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line3}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ1001 {{currentTime}} Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5 GoIP Out: № счета в смс не совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(20000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line3}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account2_3}} {{currentTime}} Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId3\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"// статус\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners status response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId3}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId3}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners incomTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId3}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.3 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners outcomeTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId3}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.4 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 135000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line3}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account_3}} {{currentTime}} Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\",\r\n    //- СЧЁТ{{owner_bank_account}} {{currentTime}} Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1 Создание входящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"1\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123002\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line3}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account_3}} {{currentTime}} Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId3\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"// статус\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners status response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId3}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId3}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners incomTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId3}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.5 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners outcomeTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId3}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6 GoIP In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line3}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // входящие\r\n    \"content\":\"- Перевод из Альфа Банк +{{transaction_sum}}р от ПЕТР П. СЧЁТ{{owner_bank_account_3}} — Баланс: {{bank_account_balance}}р 'Перевод денежных средств'\",\r\n    // \"content\":\"- MIR-0913 15:52 зачисление 133572р Баланс: 164857.47р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						}
					],
					"description": "\\- СЧЁТ9013 04:15 Оплата 470р Баланс: 123979.95р"
				},
				{
					"name": "Исходящие var4",
					"item": [
						{
							"name": "1.1 Создание исходящей транзакции GoIP Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"20564\",\n    //\"bank\": \"1\", // уже не используется, проверяется bin банка\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2202204218550234\", // сбер\n    // \"customerCard\": \"2200704612896093\", // тинькофф\n    // \"customerCard\": \"2200151333124779\", // альфа\n    // \"customerCard\": \"5169155299849073\", // приват\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3 Привязка Владельцев к Исходящей заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId3}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId1_3}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.4 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж, сумма платежа +2% и + 0,01р",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// 2% комиссия\r",
											"const commissionRate = 0.02;\r",
											"const commission = transaction_sum * commissionRate;\r",
											"const roundedCommission = Math.floor(commission * 100) / 100;\r",
											"transaction_sum_2 = transaction_sum + roundedCommission +0.05;\r",
											"console.log(\"SMS transaction sum_2:\", transaction_sum_2)\r",
											"pm.environment.set(\"transaction_sum_2\", transaction_sum_2);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line3}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    \"content\":\"СЧЁТ{{owner_bank_account_3}} {{currentTime}}  Оплата {{transaction_sum_2}}р Баланс: {{bank_account_balance}}р\",\r\n    // \"content\":\"- СЧЁТ{{owner_bank_account}} {{currentTime}} перевод {{transaction_sum}}р с комиссией 50р Баланс: {{bank_account_balance}}р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.5 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId3\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId3}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId3}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1.6 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId3}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.7 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId3}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.8 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж, сумма платежа +2%",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// 2% комиссия\r",
											"const commissionRate = 0.02;\r",
											"const commission = transaction_sum * commissionRate;\r",
											"const roundedCommission = Math.floor(commission * 100) / 100;\r",
											"transaction_sum_2 = transaction_sum + roundedCommission;\r",
											"console.log(\"SMS transaction sum_2:\", transaction_sum_2)\r",
											"pm.environment.set(\"transaction_sum_2\", transaction_sum_2);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 135000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line3}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ{{owner_bank_account_3}} {{currentTime}}  Оплата {{transaction_sum_2}}р Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 GoIP Out: Дубль смс",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
											"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"\r",
											"// получаем данные sms\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"   \r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    // берем первый счет\r",
											"    var sms= response.json().data[0].message\r",
											"    pm.environment.set(\"sms_dabl\", sms);\r",
											"\r",
											"    console.log(\"sms_prerequest\", sms)\r",
											"    });\r",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line3}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1 Создание исходящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"20564\",\n    //\"bank\": \"1\", // уже не используется, проверяется bin банка\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2202204218550234\", // сбер\n    // \"customerCard\": \"2200704612896093\", // тинькофф\n    // \"customerCard\": \"2200151333124779\", // альфа\n    // \"customerCard\": \"5169155299849073\", // приват\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.3 Привязка Владельцев к Исходящей заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId3}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId1_3}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.4 GoIP Out: № счета в смс совпадает с № счета карты, сумма не совпадает",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line3}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ{{owner_bank_account_3}} {{currentTime}}  Оплата 100р Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.5 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId3\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId3}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId3}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3.6 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId3}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.7 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId3}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "4 GoIP Out: № счета в смс отсутствует у владельца",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line2}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ1001 {{currentTime}}  Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5 GoIP Out: № счета в смс не совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(20000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line3}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ{{owner_bank_account2_3}} {{currentTime}}  Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId3\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId3}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId3}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId3}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.3 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId3}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.4 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж, сумма платежа +2%",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// 2% комиссия\r",
											"const commissionRate = 0.02;\r",
											"const commission = transaction_sum * commissionRate;\r",
											"const roundedCommission = Math.floor(commission * 100) / 100;\r",
											"transaction_sum_2 = transaction_sum + roundedCommission;\r",
											"console.log(\"SMS transaction sum_2:\", transaction_sum_2)\r",
											"pm.environment.set(\"transaction_sum_2\", transaction_sum_2);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 135000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line3}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ{{owner_bank_account_3}} {{currentTime}}  Оплата {{transaction_sum_2}}р Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1 Создание входящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"1\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123002\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line3}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ{{owner_bank_account_3}} {{currentTime}}  Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId3\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId3}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId3}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId3}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.5 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId3}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6 GoIP In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line3}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // входящие\r\n    // \"content\":\"СЧЁТ{{owner_bank_account}} {{currentTime}}  Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\",\r\n    \"content\":\"- Перевод из Альфа Банк +{{transaction_sum}}р от ПЕТР П. СЧЁТ{{owner_bank_account_3}} — Баланс: {{bank_account_balance}}р 'Перевод денежных средств'\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						}
					],
					"description": "СЧЁТ5177 12:03 Оплата 130р Баланс: 49 720.83р +2% комиссии банка"
				},
				{
					"name": "Исходящие var5",
					"item": [
						{
							"name": "1.1 Создание исходящей транзакции GoIP Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"20564\",\n    //\"bank\": \"1\", // уже не используется, проверяется bin банка\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2202204218550234\", // сбер\n    // \"customerCard\": \"2200704612896093\", // тинькофф\n    // \"customerCard\": \"2200151333124779\", // альфа\n    // \"customerCard\": \"5169155299849073\", // приват\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3 Привязка Владельцев к Исходящей заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId3}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId1_3}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.4 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 135000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line3}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ{{owner_bank_account_3}} {{currentTime}} списание {{transaction_sum}}р на вклад Баланс: {{bank_account_balance}}р\",\r\n    //- СЧЁТ{{owner_bank_account}} {{currentTime}} Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 GoIP Out: Дубль смс",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
											"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"\r",
											"// получаем данные sms\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"   \r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    // берем первый счет\r",
											"    var sms= response.json().data[0].message\r",
											"    pm.environment.set(\"sms_dabl\", sms);\r",
											"\r",
											"    console.log(\"sms_prerequest\", sms)\r",
											"    });\r",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line3}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1 Создание исходящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"20564\",\n    //\"bank\": \"1\", // уже не используется, проверяется bin банка\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2202204218550234\", // сбер\n    // \"customerCard\": \"2200704612896093\", // тинькофф\n    // \"customerCard\": \"2200151333124779\", // альфа\n    // \"customerCard\": \"5169155299849073\", // приват\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.3 Привязка Владельцев к Исходящей заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId3}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId1_3}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.4 GoIP Out: № счета в смс совпадает с № счета карты, сумма не совпадает",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line3}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ{{owner_bank_account_3}} {{currentTime}} списание 100р на вклад Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.5 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId3\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"// статус\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											"// входящие\r",
											"if (incommingTransactionsIsAllowed) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"incommingTransactionsIsAllowed\": true })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											"// исходящие\r",
											"if (outcommingTransactionsIsAllowed) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"outcommingTransactionsIsAllowed\": true })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId3}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId3}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3.6 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners incomTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId3}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.7 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners outcomeTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId3}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "4 GoIP Out: № счета в смс отсутствует у владельца",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line3}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ1001 {{currentTime}} списание {{transaction_sum}}р на вклад Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5 GoIP Out: № счета в смс не совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(20000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line3}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ{{owner_bank_account2_3}} {{currentTime}} списание {{transaction_sum}}р на вклад Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId3\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"// статус\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners status response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId3}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId3}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners incomTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId3}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.3 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners outcomeTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId3}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.4 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 135000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line3}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ{{owner_bank_account_3}} {{currentTime}} списание {{transaction_sum}}р на вклад Баланс: {{bank_account_balance}}р\",\r\n    //- СЧЁТ{{owner_bank_account}} {{currentTime}} Оплата {{transaction_sum}}р Баланс: {{bank_account_balance}}р\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1 Создание входящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"1\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123002\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 1000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line3}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"СЧЁТ{{owner_bank_account_3}} {{currentTime}} списание {{transaction_sum}}р на вклад Баланс: {{bank_account_balance}}р\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId3\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"// статус\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners status response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId3}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId3}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners incomTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId3}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.5 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Owners outcomeTransaction response was changed to 1\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId3}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6 GoIP In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line3}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // входящие\r\n    \"content\":\"- Перевод из Альфа Банк +{{transaction_sum}}р от ПЕТР П. СЧЁТ{{owner_bank_account_3}} — Баланс: {{bank_account_balance}}р 'Перевод денежных средств'\",\r\n    // \"content\":\"- MIR-0913 15:52 зачисление 133572р Баланс: 164857.47р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						}
					],
					"description": "СЧЁТ8913 16:04 списание 512.25р на вклад Баланс: 50 770.50р"
				},
				{
					"name": "Исходящие смс Отмена",
					"item": [
						{
							"name": "1.1 Создание исходящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"20564\",\n    //\"bank\": \"1\", // уже не используется, проверяется bin банка\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2202204218550234\", // сбер\n    // \"customerCard\": \"2200704612896093\", // тинькофф\n    // \"customerCard\": \"2200151333124779\", // альфа\n    // \"customerCard\": \"5169155299849073\", // приват\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3 Привязка Владельцев к Исходящей заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId3}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId1_3}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.4 GoIP Out: № счета в смс совпадает с № счета карты, с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line3}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- MIR-{{owner_bank_card1}} {{currentTime}} зачисление {{transaction_sum}}р Баланс: {{bank_account_balance}}р[notification]\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account_3}} {{currentTime}} перевод {{transaction_sum}}р с комиссией 50р Баланс: {{bank_account_balance}}р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 GoIP Out: Исходящие смс Отмена",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getCurrentTime() {\r",
											"    const currentDate = new Date();\r",
											"    const hours = String(currentDate.getHours()).padStart(2, '0');\r",
											"    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r",
											"    return `${hours}:${minutes}`;\r",
											"}\r",
											"const currentTime = getCurrentTime();\r",
											"pm.environment.set(\"currentTime\", currentTime);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000);\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId3\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(5);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line3}}\",\r\n    // \"goip_line\":\"27G3201\",   // 778913 / 3301 - счет/ 0913 / 0211\r\n    // \"content\":\"- СЧЁТ{{owner_bank_account}} {{currentTime}} отмена перевода {{transaction_sum}}р с комиссией 50р Баланс: 14758.40р[notification]\",\r\n    \"content\":\"- СЧЁТ{{owner_bank_account_3}} {{currentTime}} отмена перевода {{transaction_sum}}р с комиссией 50р Баланс: {{bank_account_balance}}р[notification]\",\r\n    //\r\n    \"from_number\":\"900\", // Сбербанк\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						}
					],
					"description": "\\- СЧЁТ2678 11:14 отмена перевода 10000р с комиссией 150р Баланс: 14758.40р\\[notification\\]"
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{tokenAdmin}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "https://websitewizard.ru",
			"type": "string"
		},
		{
			"value": "",
			"type": "string",
			"disabled": true
		}
	]
}