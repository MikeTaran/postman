{
	"info": {
		"_postman_id": "688e3a10-c766-4a2b-91bc-ad24211ac0f1",
		"name": "(SMS_Sinara) Тестирование API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24214897"
	},
	"item": [
		{
			"name": "есть БИК есть Карта",
			"item": [
				{
					"name": "Входящие var1 GoIP",
					"item": [
						{
							"name": "0.1 Обновление статуса 1 Copy 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId_sinara}},\r\n    \"status\":1\r\n    //\"incommingTransactionsIsAllowed\":true,\r\n    //\"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.1 Создание входящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 GoIP In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Карта 0001 зачислено {{transaction_sum}} RUB Tinkoff Card2Card {{dateLong}}. Доступно {{bank_account_balance}} RUR\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 GoIP In: Дубль смс",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}.${month}.${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
											"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"\r",
											"// получаем данные sms\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"   \r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    // берем первый счет\r",
											"    var sms= response.json().data[0].message\r",
											"    pm.environment.set(\"sms_dabl\", sms);\r",
											"\r",
											"    console.log(\"sms_prerequest\", sms)\r",
											"    });\r",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // // берем первый счет\r",
											"    // var bank_account_admin = response.json().data[1].amount\r",
											"    // var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    // });\r",
											"    // console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    // console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1 Создание входящей транзакции GoIP 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2 GoIP In: № карты в смс не совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Карта 0002 зачислено {{transaction_sum}} RUB Tinkoff Card2Card {{dateLong}}. Доступно {{bank_account_balance}} RUR\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. GoIP In: № карты в смс совпадает с №карты, на которую был платеж, сумма не совпадает",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Карта 0001 зачислено 250 RUB Tinkoff Card2Card {{dateLong}}. Доступно {{bank_account_balance}} RUR\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1 GoIP In: № карты в смс отсутствует в списке",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000)\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Карта 9999 зачислено {{transaction_sum}} RUB Tinkoff Card2Card {{dateLong}}. Доступно {{bank_account_balance}} RUR\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2 GoIP In: № карты в смс совпадает с №карты, на которую был платеж Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Карта 0001 зачислено {{transaction_sum}} RUB Tinkoff Card2Card {{dateLong}}. Доступно {{bank_account_balance}} RUR\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1 Создание исходящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2200481700523405\",\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3 Привязка Владельцев к Исходящей. заявки Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId_sinara}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId_sinara}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4 GoIP In: № карты в смс совпадает с №карты, но платеж ИС Х",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Карта 0001 зачислено {{transaction_sum}} RUB Tinkoff Card2Card {{dateLong}}. Доступно {{bank_account_balance}} RUR\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.5 GoIP Out: № карты в смс совпадает с №карты",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0001 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6 Подтверждение заявки",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\":{{transaction_Id}},\r\n\t\"ownersProviderCommissions\":\r\n\t\t{\r\n\t\t\t\"{{ownerId}}\":null\r\n\t\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/done",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"done"
									]
								}
							},
							"response": []
						}
					],
					"description": "StartFragment\n\n\\- Карта 5668 зачислено 10,00 RUB Tinkoff Card2Card 16/05/2024. Доступно 10,00 RUR\n\nEndFragment"
				},
				{
					"name": "Входящие var2 MD",
					"item": [
						{
							"name": "1.1 Создание входящей транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 MD In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 zachisleno {{transaction_sum}} RUR {{dateLong}} Dostupno {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 zachisleno {{transaction_sum}} RUR {{dateLong}} Dostupno {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2 MD In: Дубль смс",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}.${month}.${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
											"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"\r",
											"// получаем данные sms\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"   \r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    // берем первый счет\r",
											"    var sms= response.json().data[0].message\r",
											"    pm.environment.set(\"sms_dabl\", sms);\r",
											"\r",
											"    console.log(\"sms_prerequest\", sms)\r",
											"    });\r",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // // берем первый счет\r",
											"    // var bank_account_admin = response.json().data[1].amount\r",
											"    // var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    // });\r",
											"    // console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    // console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1 Создание входящей транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2 MD In: № карты в смс не совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0002 zachisleno {{transaction_sum}} RUR {{dateLong}} Dostupno {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0002 zachisleno {{transaction_sum}} RUR {{dateLong}} Dostupno {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4. MD In: № карты в смс совпадает с №карты, на которую был платеж, сумма не совпадает",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 zachisleno 250.25 RUR {{dateLong}} Dostupno {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 zachisleno 250.25 RUR {{dateLong}} Dostupno {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1 MD In: № карты в смс отсутствует в списке",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 9999 zachisleno {{transaction_sum}} RUR {{dateLong}} Dostupno {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 9999 zachisleno {{transaction_sum}} RUR {{dateLong}} Dostupno {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2 MD In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 zachisleno {{transaction_sum}} RUR {{dateLong}} Dostupno {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 zachisleno {{transaction_sum}} RUR {{dateLong}} Dostupno {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1 Создание исходящей транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2200481700523405\",\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3 Привязка Владельцев к Исходящей. заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId_sinara}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId_sinara}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4 MD In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 zachisleno {{transaction_sum}} RUR {{dateLong}} Dostupno {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 zachisleno {{transaction_sum}} RUR {{dateLong}} Dostupno {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.5 MD Out: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR\"",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6 Подтверждение заявки",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\":{{transaction_Id}},\r\n\t\"ownersProviderCommissions\":\r\n\t\t{\r\n\t\t\t\"{{ownerId}}\":null\r\n\t\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/done",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"done"
									]
								}
							},
							"response": []
						}
					],
					"description": "StartFragment\n\n\\- Karta 1241 zachisleno 50,00 RUR 27/06/2024 Dostupno 76,70 RUR\n\nEndFragment"
				},
				{
					"name": "Входящие var3 MD",
					"item": [
						{
							"name": "1.1 Создание входящей транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 MD In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 zachisleno {{transaction_sum}} RUB PAO 'Bank 'Sankt-Peter {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 zachisleno {{transaction_sum}} RUB PAO 'Bank 'Sankt-Peter {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2 MD In: Дубль смс",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}.${month}.${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
											"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"\r",
											"// получаем данные sms\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"   \r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    // берем первый счет\r",
											"    var sms= response.json().data[0].message\r",
											"    pm.environment.set(\"sms_dabl\", sms);\r",
											"\r",
											"    console.log(\"sms_prerequest\", sms)\r",
											"    });\r",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // // берем первый счет\r",
											"    // var bank_account_admin = response.json().data[1].amount\r",
											"    // var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    // });\r",
											"    // console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    // console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1 Создание входящей транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2 MD In: № карты в смс не совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0002 zachisleno {{transaction_sum}} RUB PAO 'Bank 'Sankt-Peter {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0002 zachisleno {{transaction_sum}} RUB PAO 'Bank 'Sankt-Peter {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4. MD In: № карты в смс совпадает с №карты, на которую был платеж, сумма не совпадает",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 zachisleno 250.00 RUB PAO 'Bank 'Sankt-Peter {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 zachisleno 250.00 RUB PAO 'Bank 'Sankt-Peter {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1 MD In: № карты в смс отсутствует в списке",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 9991 zachisleno {{transaction_sum}} RUB PAO 'Bank 'Sankt-Peter {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 9991 zachisleno {{transaction_sum}} RUB PAO 'Bank 'Sankt-Peter {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2 MD In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 zachisleno {{transaction_sum}} RUB PAO 'Bank 'Sankt-Peter {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 zachisleno {{transaction_sum}} RUB PAO 'Bank 'Sankt-Peter {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1 Создание исходящей транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2200481700523405\",\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3 Привязка Владельцев к Исходящей. заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId_sinara}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId_sinara}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4 MD In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 zachisleno {{transaction_sum}} RUB PAO 'Bank 'Sankt-Peter {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 zachisleno {{transaction_sum}} RUB PAO 'Bank 'Sankt-Peter {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.5 MD Out: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR\"",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6 Подтверждение заявки",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\":{{transaction_Id}},\r\n\t\"ownersProviderCommissions\":\r\n\t\t{\r\n\t\t\t\"{{ownerId}}\":null\r\n\t\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/done",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"done"
									]
								}
							},
							"response": []
						}
					],
					"description": "- Karta 0305 zachisleno 1004,00 RUB PAO \"Bank \"Sankt-Peter 04/07/2024. Dostupno 1034,00 RUR\\[not_title\\]\\[not_ticker\\]\\[notification\\]"
				},
				{
					"name": "Входящие var3 GoIP",
					"item": [
						{
							"name": "1.1 Создание входящей транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 GoIP In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0001 zachisleno {{transaction_sum}} RUB PAO 'Bank 'Sankt-Peter {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 GoIP In: Дубль смс",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}.${month}.${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
											"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"\r",
											"// получаем данные sms\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"   \r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    // берем первый счет\r",
											"    var sms= response.json().data[0].message\r",
											"    pm.environment.set(\"sms_dabl\", sms);\r",
											"\r",
											"    console.log(\"sms_prerequest\", sms)\r",
											"    });\r",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // // берем первый счет\r",
											"    // var bank_account_admin = response.json().data[1].amount\r",
											"    // var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    // });\r",
											"    // console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    // console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1 Создание входящей транзакции GoIP 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2 GoIP In: № карты в смс не совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0002 zachisleno {{transaction_sum}} RUB PAO 'Bank 'Sankt-Peter {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. GoIP In: № карты в смс совпадает с №карты, на которую был платеж, сумма не совпадает",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0001 zachisleno 250,25 RUB PAO 'Bank 'Sankt-Peter {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1 GoIP In: № карты в смс отсутствует в списке",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000)\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 9999 zachisleno {{transaction_sum}} RUB PAO 'Bank 'Sankt-Peter {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2 GoIP In: № карты в смс совпадает с №карты, на которую был платеж Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0001 zachisleno {{transaction_sum}} RUB PAO 'Bank 'Sankt-Peter {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1 Создание исходящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2200481700523405\",\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3 Привязка Владельцев к Исходящей. заявки Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId_sinara}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId_sinara}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4 GoIP In: № карты в смс совпадает с №карты, но платеж ИС Х",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0001 zachisleno {{transaction_sum}} RUB PAO 'Bank 'Sankt-Peter {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.5 GoIP Out: № карты в смс совпадает с №карты",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0001 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6 Подтверждение заявки",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\":{{transaction_Id}},\r\n\t\"ownersProviderCommissions\":\r\n\t\t{\r\n\t\t\t\"{{ownerId}}\":null\r\n\t\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/done",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"done"
									]
								}
							},
							"response": []
						}
					],
					"description": "- Karta 0305 zachisleno 1004,00 RUB PAO \"Bank \"Sankt-Peter 04/07/2024. Dostupno 1034,00 RUR\\[not_title\\]\\[not_ticker\\]\\[notification\\]"
				},
				{
					"name": "Входящие var4 MD",
					"item": [
						{
							"name": "1.1 Создание входящей транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 MD In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 zachisleno {{transaction_sum}} RUB VTB VTB {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 zachisleno {{transaction_sum}} RUB VTB VTB {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2 MD In: Дубль смс",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}.${month}.${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
											"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"\r",
											"// получаем данные sms\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"   \r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    // берем первый счет\r",
											"    var sms= response.json().data[0].message\r",
											"    pm.environment.set(\"sms_dabl\", sms);\r",
											"\r",
											"    console.log(\"sms_prerequest\", sms)\r",
											"    });\r",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // // берем первый счет\r",
											"    // var bank_account_admin = response.json().data[1].amount\r",
											"    // var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    // });\r",
											"    // console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    // console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1 Создание входящей транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2 MD In: № карты в смс не совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0002 zachisleno {{transaction_sum}} RUB VTB VTB {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0002 zachisleno {{transaction_sum}} RUB VTB VTB {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4. MD In: № карты в смс совпадает с №карты, на которую был платеж, сумма не совпадает",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 zachisleno 250.00 RUB VTB VTB {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 zachisleno 250.00 RUB VTB VTB {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1 MD In: № карты в смс отсутствует в списке",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 9999 zachisleno {{transaction_sum}} RUB VTB VTB {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 9999 zachisleno {{transaction_sum}} RUB VTB VTB {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2 MD In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 zachisleno {{transaction_sum}} RUB VTB VTB {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 zachisleno {{transaction_sum}} RUB VTB VTB {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1 Создание исходящей транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2200481700523405\",\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3 Привязка Владельцев к Исходящей. заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId_sinara}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId_sinara}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4 MD In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 zachisleno {{transaction_sum}} RUB VTB VTB {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 zachisleno {{transaction_sum}} RUB VTB VTB {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.5 MD Out: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR\"",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6 Подтверждение заявки Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\":{{transaction_Id}},\r\n\t\"ownersProviderCommissions\":\r\n\t\t{\r\n\t\t\t\"{{ownerId}}\":null\r\n\t\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/done",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"done"
									]
								}
							},
							"response": []
						}
					],
					"description": "- - StartFragment- Karta 0305 zachisleno 1509,00 RUB VTB VTB 04/07/2024. Dostupno 13152,00 RUR\\[not_title\\]\\[not_ticker\\]\\[notification\\]EndFragment"
				},
				{
					"name": "Входящие var4 GoIP",
					"item": [
						{
							"name": "1.1 Создание входящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 GoIP In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0001 zachisleno {{transaction_sum}} RUB VTB VTB {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 GoIP In: Дубль смс",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}.${month}.${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
											"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"\r",
											"// получаем данные sms\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"   \r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    // берем первый счет\r",
											"    var sms= response.json().data[0].message\r",
											"    pm.environment.set(\"sms_dabl\", sms);\r",
											"\r",
											"    console.log(\"sms_prerequest\", sms)\r",
											"    });\r",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // // берем первый счет\r",
											"    // var bank_account_admin = response.json().data[1].amount\r",
											"    // var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    // });\r",
											"    // console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    // console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1 Создание входящей транзакции GoIP 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2 GoIP In: № карты в смс не совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0002 zachisleno {{transaction_sum}} RUB VTB VTB {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. GoIP In: № карты в смс совпадает с №карты, на которую был платеж, сумма не совпадает",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0001 zachisleno 250,00 RUB VTB VTB {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1 GoIP In: № карты в смс отсутствует в списке",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000)\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 9999 zachisleno {{transaction_sum}} RUB VTB VTB {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2 GoIP In: № карты в смс совпадает с №карты, на которую был платеж Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0001 zachisleno {{transaction_sum}} RUB VTB VTB {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1 Создание исходящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2200481700523405\",\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3 Привязка Владельцев к Исходящей. заявки Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId_sinara}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId_sinara}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4 GoIP In: № карты в смс совпадает с №карты, но платеж ИС Х",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0001 zachisleno {{transaction_sum}} RUB VTB VTB {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.5 GoIP Out: № карты в смс совпадает с №карты",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0001 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6 Подтверждение заявки Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\":{{transaction_Id}},\r\n\t\"ownersProviderCommissions\":\r\n\t\t{\r\n\t\t\t\"{{ownerId}}\":null\r\n\t\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/done",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"done"
									]
								}
							},
							"response": []
						}
					],
					"description": "- StartFragment- Karta 0305 zachisleno 1509,00 RUB VTB VTB 04/07/2024. Dostupno 13152,00 RUR\\[not_title\\]\\[not_ticker\\]\\[notification\\]EndFragment"
				},
				{
					"name": "Входящие var5 MD",
					"item": [
						{
							"name": "1.1 Создание входящей транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 MD In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 zachisleno {{transaction_sum}} RUB SBOL {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 zachisleno {{transaction_sum}} RUB SBOL {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2 MD In: Дубль смс",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}.${month}.${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
											"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"\r",
											"// получаем данные sms\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"   \r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    // берем первый счет\r",
											"    var sms= response.json().data[0].message\r",
											"    pm.environment.set(\"sms_dabl\", sms);\r",
											"\r",
											"    console.log(\"sms_prerequest\", sms)\r",
											"    });\r",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // // берем первый счет\r",
											"    // var bank_account_admin = response.json().data[1].amount\r",
											"    // var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    // });\r",
											"    // console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    // console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1 Создание входящей транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2 MD In: № карты в смс не совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0002 zachisleno {{transaction_sum}} RUB SBOL {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0002 zachisleno {{transaction_sum}} RUB SBOL {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4. MD In: № карты в смс совпадает с №карты, на которую был платеж, сумма не совпадает",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 zachisleno 250.25 RUB SBOL {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 zachisleno 250.25 RUB SBOL {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1 MD In: № карты в смс отсутствует в списке",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 9999 zachisleno {{transaction_sum}} RUB SBOL {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 9999 zachisleno {{transaction_sum}} RUB SBOL {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2 MD In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 zachisleno {{transaction_sum}} RUB SBOL {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 zachisleno {{transaction_sum}} RUB SBOL {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1 Создание исходящей транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2200481700523405\",\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3 Привязка Владельцев к Исходящей. заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId_sinara}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId_sinara}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4 MD In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 zachisleno {{transaction_sum}} RUB SBOL {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 zachisleno {{transaction_sum}} RUB SBOL {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.5 MD Out: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR\"",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6 Подтверждение заявки Copy 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\":{{transaction_Id}},\r\n\t\"ownersProviderCommissions\":\r\n\t\t{\r\n\t\t\t\"{{ownerId}}\":null\r\n\t\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/done",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"done"
									]
								}
							},
							"response": []
						}
					],
					"description": "StartFragment\n\n\\- Karta 0305 zachisleno 1017,00 RUB SBOL 04/07/2024. Dostupno 14169,00 RUR\\[not_title\\]\\[not_ticker\\]\\[notification\\]\n\nEndFragment"
				},
				{
					"name": "Входящие var5 GoIP",
					"item": [
						{
							"name": "1.1 Создание входящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 GoIP In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0001 zachisleno {{transaction_sum}} RUB SBOL {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 GoIP In: Дубль смс",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}.${month}.${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
											"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"\r",
											"// получаем данные sms\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"   \r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    // берем первый счет\r",
											"    var sms= response.json().data[0].message\r",
											"    pm.environment.set(\"sms_dabl\", sms);\r",
											"\r",
											"    console.log(\"sms_prerequest\", sms)\r",
											"    });\r",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // // берем первый счет\r",
											"    // var bank_account_admin = response.json().data[1].amount\r",
											"    // var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    // });\r",
											"    // console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    // console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1 Создание входящей транзакции GoIP 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2 GoIP In: № карты в смс не совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0002 zachisleno {{transaction_sum}} RUB SBOL {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. GoIP In: № карты в смс совпадает с №карты, на которую был платеж, сумма не совпадает",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0001 zachisleno 250 RUB SBOL {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1 GoIP In: № карты в смс отсутствует в списке",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000)\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 9999 zachisleno {{transaction_sum}} RUB SBOL {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2 GoIP In: № карты в смс совпадает с №карты, на которую был платеж Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0001 zachisleno {{transaction_sum}} RUB SBOL {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1 Создание исходящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2200481700523405\",\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3 Привязка Владельцев к Исходящей. заявки Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId_sinara}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId_sinara}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4 GoIP In: № карты в смс совпадает с №карты, но платеж ИС Х",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0001 zachisleno {{transaction_sum}} RUB SBOL {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.5 GoIP Out: № карты в смс совпадает с №карты",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0001 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6 Подтверждение заявки Copy 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\":{{transaction_Id}},\r\n\t\"ownersProviderCommissions\":\r\n\t\t{\r\n\t\t\t\"{{ownerId}}\":null\r\n\t\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/done",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"done"
									]
								}
							},
							"response": []
						}
					],
					"description": "- StartFragment- Karta 0305 zachisleno 1017,00 RUB SBOL 04/07/2024. Dostupno 14169,00 RUR\\[not_title\\]\\[not_ticker\\]\\[notification\\]EndFragment"
				},
				{
					"name": "Входящие var6 MD",
					"item": [
						{
							"name": "1.1 Создание входящей транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 MD In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 zachisleno {{transaction_sum}} RUB Tinkoff Card2Card {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 zachisleno {{transaction_sum}} RUB Tinkoff Card2Card {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2 MD In: Дубль смс",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}.${month}.${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
											"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"\r",
											"// получаем данные sms\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"   \r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    // берем первый счет\r",
											"    var sms= response.json().data[0].message\r",
											"    pm.environment.set(\"sms_dabl\", sms);\r",
											"\r",
											"    console.log(\"sms_prerequest\", sms)\r",
											"    });\r",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // // берем первый счет\r",
											"    // var bank_account_admin = response.json().data[1].amount\r",
											"    // var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    // });\r",
											"    // console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    // console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1 Создание входящей транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2 MD In: № карты в смс не совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0002 zachisleno {{transaction_sum}} RUB Tinkoff Card2Card {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0002 zachisleno {{transaction_sum}} RUB Tinkoff Card2Card {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4. MD In: № карты в смс совпадает с №карты, на которую был платеж, сумма не совпадает",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 zachisleno 250.00 RUB Tinkoff Card2Card {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 zachisleno 250.00 RUB Tinkoff Card2Card {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1 MD In: № карты в смс отсутствует в списке",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 9999 zachisleno {{transaction_sum}} RUB Tinkoff Card2Card {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 9999 zachisleno {{transaction_sum}} RUB Tinkoff Card2Card {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2 MD In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 zachisleno {{transaction_sum}} RUB Tinkoff Card2Card {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 zachisleno {{transaction_sum}} RUB Tinkoff Card2Card {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1 Создание исходящей транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2200481700523405\",\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3 Привязка Владельцев к Исходящей. заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId_sinara}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId_sinara}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4 MD In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 zachisleno {{transaction_sum}} RUB Tinkoff Card2Card {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 zachisleno {{transaction_sum}} RUB Tinkoff Card2Card {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.5 MD Out: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR\"",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6 Подтверждение заявки Copy 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\":{{transaction_Id}},\r\n\t\"ownersProviderCommissions\":\r\n\t\t{\r\n\t\t\t\"{{ownerId}}\":null\r\n\t\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/done",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"done"
									]
								}
							},
							"response": []
						}
					],
					"description": "StartFragment\n\n- \\- Karta 0305 zachisleno 1013,00 RUB Tinkoff Card2Card 04/07/2024. Dostupno 15182,00 RUR\\[not_title\\]\\[not_ticker\\]\\[notification\\]\n    \n- EndFragment"
				},
				{
					"name": "Входящие var6 GoIP",
					"item": [
						{
							"name": "1.1 Создание входящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 GoIP In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0001 zachisleno {{transaction_sum}} RUB Tinkoff Card2Card {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 GoIP In: Дубль смс",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}.${month}.${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
											"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"\r",
											"// получаем данные sms\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"   \r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    // берем первый счет\r",
											"    var sms= response.json().data[0].message\r",
											"    pm.environment.set(\"sms_dabl\", sms);\r",
											"\r",
											"    console.log(\"sms_prerequest\", sms)\r",
											"    });\r",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // // берем первый счет\r",
											"    // var bank_account_admin = response.json().data[1].amount\r",
											"    // var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    // });\r",
											"    // console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    // console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1 Создание входящей транзакции GoIP 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2 GoIP In: № карты в смс не совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0002 zachisleno {{transaction_sum}} RUB Tinkoff Card2Card {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. GoIP In: № карты в смс совпадает с №карты, на которую был платеж, сумма не совпадает",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0001 zachisleno 250.25 RUB Tinkoff Card2Card {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1 GoIP In: № карты в смс отсутствует в списке",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000)\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 9999 zachisleno {{transaction_sum}} RUB Tinkoff Card2Card {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2 GoIP In: № карты в смс совпадает с №карты, на которую был платеж Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0001 zachisleno {{transaction_sum}} RUB Tinkoff Card2Card {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1 Создание исходящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2200481700523405\",\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3 Привязка Владельцев к Исходящей. заявки Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId_sinara}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId_sinara}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4 GoIP In: № карты в смс совпадает с №карты, но платеж ИС Х",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0001 zachisleno {{transaction_sum}} RUB Tinkoff Card2Card {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.5 GoIP Out: № карты в смс совпадает с №карты",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0001 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6 Подтверждение заявки Copy 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\":{{transaction_Id}},\r\n\t\"ownersProviderCommissions\":\r\n\t\t{\r\n\t\t\t\"{{ownerId}}\":null\r\n\t\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/done",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"done"
									]
								}
							},
							"response": []
						}
					],
					"description": "- StartFragment\n    \n- \\- Karta 0305 zachisleno 1013,00 RUB Tinkoff Card2Card 04/07/2024. Dostupno 15182,00 RUR\\[not_title\\]\\[not_ticker\\]\\[notification\\]\n    \n- EndFragment"
				},
				{
					"name": "Входящие var7 MD",
					"item": [
						{
							"name": "1.1 Создание входящей транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 MD In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 zachisleno {{transaction_sum}} RUB PEREVOD DR BANK {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 zachisleno {{transaction_sum}} RUB PEREVOD DR BANK {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2 MD In: Дубль смс",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}.${month}.${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
											"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"\r",
											"// получаем данные sms\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"   \r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    // берем первый счет\r",
											"    var sms= response.json().data[0].message\r",
											"    pm.environment.set(\"sms_dabl\", sms);\r",
											"\r",
											"    console.log(\"sms_prerequest\", sms)\r",
											"    });\r",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // // берем первый счет\r",
											"    // var bank_account_admin = response.json().data[1].amount\r",
											"    // var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    // });\r",
											"    // console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    // console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1 Создание входящей транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2 MD In: № карты в смс не совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0002 zachisleno {{transaction_sum}} RUB PEREVOD DR BANK {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0002 zachisleno {{transaction_sum}} RUB PEREVOD DR BANK {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4. MD In: № карты в смс совпадает с №карты, на которую был платеж, сумма не совпадает",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 zachisleno 250.00 RUB PEREVOD DR BANK {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 zachisleno 250.00 RUB PEREVOD DR BANK {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1 MD In: № карты в смс отсутствует в списке",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 9999 zachisleno {{transaction_sum}} RUB PEREVOD DR BANK {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 9999 zachisleno {{transaction_sum}} RUB PEREVOD DR BANK {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2 MD In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 zachisleno {{transaction_sum}} RUB PEREVOD DR BANK {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 zachisleno {{transaction_sum}} RUB PEREVOD DR BANK {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1 Создание исходящей транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2200481700523405\",\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3 Привязка Владельцев к Исходящей. заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId_sinara}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId_sinara}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4 MD In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 zachisleno {{transaction_sum}} RUB PEREVOD DR BANK {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 zachisleno {{transaction_sum}} RUB PEREVOD DR BANK {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.5 MD Out: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR\"",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6 Подтверждение заявки Copy 7",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\":{{transaction_Id}},\r\n\t\"ownersProviderCommissions\":\r\n\t\t{\r\n\t\t\t\"{{ownerId}}\":null\r\n\t\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/done",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"done"
									]
								}
							},
							"response": []
						}
					],
					"description": "- StartFragment\n    \n- \\- Karta 0305 zachisleno 10,00 RUB PEREVOD DR BANK 04/07/2024. Dostupno 22222,00 RUR\\[not_title\\]\\[not_ticker\\]\\[notification\\]\n    \n- EndFragment"
				},
				{
					"name": "Входящие var7 GoIP",
					"item": [
						{
							"name": "1.1 Создание входящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 GoIP In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0001 zachisleno {{transaction_sum}} RUB PEREVOD DR BANK {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 GoIP In: Дубль смс",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}.${month}.${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
											"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"\r",
											"// получаем данные sms\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"   \r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    // берем первый счет\r",
											"    var sms= response.json().data[0].message\r",
											"    pm.environment.set(\"sms_dabl\", sms);\r",
											"\r",
											"    console.log(\"sms_prerequest\", sms)\r",
											"    });\r",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // // берем первый счет\r",
											"    // var bank_account_admin = response.json().data[1].amount\r",
											"    // var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    // });\r",
											"    // console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    // console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1 Создание входящей транзакции GoIP 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2 GoIP In: № карты в смс не совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0002 zachisleno {{transaction_sum}} RUB PEREVOD DR BANK {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. GoIP In: № карты в смс совпадает с №карты, на которую был платеж, сумма не совпадает",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0001 zachisleno 250.25 RUB PEREVOD DR BANK {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1 GoIP In: № карты в смс отсутствует в списке",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000)\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 9999 zachisleno {{transaction_sum}} RUB PEREVOD DR BANK {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2 GoIP In: № карты в смс совпадает с №карты, на которую был платеж Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0001 zachisleno {{transaction_sum}} RUB PEREVOD DR BANK {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1 Создание исходящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2200481700523405\",\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3 Привязка Владельцев к Исходящей. заявки Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId_sinara}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId_sinara}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4 GoIP In: № карты в смс совпадает с №карты, но платеж ИС Х",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0001 zachisleno {{transaction_sum}} RUB PEREVOD DR BANK {{dateLong}}. Dostupno {{bank_account_balance}} RUR[not_title][not_ticker][notification]\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.5 GoIP Out: № карты в смс совпадает с №карты",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0001 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6 Подтверждение заявки Copy 8",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\":{{transaction_Id}},\r\n\t\"ownersProviderCommissions\":\r\n\t\t{\r\n\t\t\t\"{{ownerId}}\":null\r\n\t\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/done",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"done"
									]
								}
							},
							"response": []
						}
					],
					"description": "- StartFragment\n    \n- \\- Karta 0305 zachisleno 10,00 RUB PEREVOD DR BANK 04/07/2024. Dostupno 22222,00 RUR\\[not_title\\]\\[not_ticker\\]\\[notification\\]\n    \n- EndFragment"
				},
				{
					"name": "Входящие var8 MD",
					"item": [
						{
							"name": "1.1 Создание входящей транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 MD In: № счета в смс совпадает с №счета, на который был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}.${month}.${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    // });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=Синара БанкСчет 0401 зачислено {{transaction_sum}} RUR {{dateLong}} перевод (СБП)",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "Синара БанкСчет 0401 зачислено {{transaction_sum}} RUR {{dateLong}} перевод (СБП)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2 MD In: Дубль смс",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}.${month}.${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
											"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"\r",
											"// получаем данные sms\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"   \r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    // берем первый счет\r",
											"    var sms= response.json().data[0].message\r",
											"    pm.environment.set(\"sms_dabl\", sms);\r",
											"\r",
											"    console.log(\"sms_prerequest\", sms)\r",
											"    });\r",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // // берем первый счет\r",
											"    // var bank_account_admin = response.json().data[1].amount\r",
											"    // var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    // });\r",
											"    // console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    // console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1 Создание входящей транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2 MD In: № счета в смс не совпадает с №счета, на который был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}.${month}.${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    // });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=Синара БанкСчет 0402 зачислено {{transaction_sum}} RUR {{dateLong}} перевод (СБП)",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "Синара БанкСчет 0402 зачислено {{transaction_sum}} RUR {{dateLong}} перевод (СБП)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4. MD In: № счета в смс совпадает с №счета, на который был платеж, сумма не совпадает",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}.${month}.${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    // });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=Синара БанкСчет 0401 зачислено 250,25 RUR {{dateLong}} перевод (СБП)",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "Синара БанкСчет 0401 зачислено 250,25 RUR {{dateLong}} перевод (СБП)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1 MD In: № счета в смс отсутствует в списке",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}.${month}.${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
											"    //     pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
											"    // });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=Синара БанкСчет 9999 зачислено {{transaction_sum}} RUR {{dateLong}} перевод (СБП)",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "Синара БанкСчет 9999 зачислено {{transaction_sum}} RUR {{dateLong}} перевод (СБП)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2 MD In: № счета в смс совпадает с №счета, на который был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}.${month}.${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    // });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=Синара БанкСчет 0401 зачислено {{transaction_sum}} RUR {{dateLong}} перевод (СБП)",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "Синара БанкСчет 0401 зачислено {{transaction_sum}} RUR {{dateLong}} перевод (СБП)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1 Создание исходящей транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2200481700523405\",\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3 Привязка Владельцев к Исходящей. заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId_sinara}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId_sinara}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4 MD In: № счета в смс совпадает с №счета, на который был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}.${month}.${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[0].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    // });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=Синара БанкСчет 0401 зачислено {{transaction_sum}} RUR {{dateLong}} перевод (СБП)",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "Синара БанкСчет 0401 зачислено {{transaction_sum}} RUR {{dateLong}} перевод (СБП)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.5 MD Out: № счета в смс совпадает с №счета, на который был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR\"",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6 Подтверждение заявки Copy 9",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\":{{transaction_Id}},\r\n\t\"ownersProviderCommissions\":\r\n\t\t{\r\n\t\t\t\"{{ownerId}}\":null\r\n\t\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/done",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"done"
									]
								}
							},
							"response": []
						}
					],
					"description": "Синара БанкСчет 2415 зачислено 20.00 RUR 04.07.2024 перевод (СБП)"
				},
				{
					"name": "Входящие var9 MD",
					"item": [
						{
							"name": "1.1 Создание входящей транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 MD In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=[sms_message]Синара БанкКарта 0001 зачислено {{transaction_sum}} RUB DBO {{dateLong}}. Доступно {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "[sms_message]Синара БанкКарта 0001 зачислено {{transaction_sum}} RUB DBO {{dateLong}}. Доступно {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2 MD In: Дубль смс",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}.${month}.${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
											"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"\r",
											"// получаем данные sms\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"   \r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    // берем первый счет\r",
											"    var sms= response.json().data[0].message\r",
											"    pm.environment.set(\"sms_dabl\", sms);\r",
											"\r",
											"    console.log(\"sms_prerequest\", sms)\r",
											"    });\r",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // // берем первый счет\r",
											"    // var bank_account_admin = response.json().data[1].amount\r",
											"    // var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    // });\r",
											"    // console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    // console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1 Создание входящей транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2 MD In: № карты в смс не совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=[sms_message]Синара БанкКарта 0002 зачислено {{transaction_sum}} RUB DBO {{dateLong}}. Доступно {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "[sms_message]Синара БанкКарта 0002 зачислено {{transaction_sum}} RUB DBO {{dateLong}}. Доступно {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4. MD In: № карты в смс совпадает с №карты, на которую был платеж, сумма не совпадает",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=[sms_message]Синара БанкКарта 0001 зачислено 250,25 RUB DBO {{dateLong}}. Доступно {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "[sms_message]Синара БанкКарта 0001 зачислено 250,25 RUB DBO {{dateLong}}. Доступно {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1 MD In: № карты в смс отсутствует в списке",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=[sms_message]Синара БанкКарта 9999 зачислено {{transaction_sum}} RUB DBO {{dateLong}}. Доступно {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "[sms_message]Синара БанкКарта 9999 зачислено {{transaction_sum}} RUB DBO {{dateLong}}. Доступно {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2 MD In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=[sms_message]Синара БанкКарта 0001 зачислено {{transaction_sum}} RUB DBO {{dateLong}}. Доступно {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "[sms_message]Синара БанкКарта 0001 зачислено {{transaction_sum}} RUB DBO {{dateLong}}. Доступно {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1 Создание исходящей транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2200481700523405\",\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3 Привязка Владельцев к Исходящей. заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId_sinara}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId_sinara}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4 MD In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=[sms_message]Синара БанкКарта 0001 зачислено {{transaction_sum}} RUB DBO {{dateLong}}. Доступно {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "[sms_message]Синара БанкКарта 0001 зачислено {{transaction_sum}} RUB DBO {{dateLong}}. Доступно {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.5 MD Out: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR\"",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6 Подтверждение заявки Copy 7",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\":{{transaction_Id}},\r\n\t\"ownersProviderCommissions\":\r\n\t\t{\r\n\t\t\t\"{{ownerId}}\":null\r\n\t\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/done",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"done"
									]
								}
							},
							"response": []
						}
					],
					"description": "- StartFragment\n    \n- \\[sms_message\\]Синара БанкКарта 6349 зачислено 1002,00 RUB DBO 22/07/2024. Доступно 12065,08 RUR\n    \n- EndFragment"
				},
				{
					"name": "Входящие var10 MD",
					"item": [
						{
							"name": "1.1 Создание входящей транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 MD In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=[sms_message]Синара БанкКарта 0001 зачислено {{transaction_sum}} RUB SBOL {{dateLong}}. Доступно {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "[sms_message]Синара БанкКарта 0001 зачислено {{transaction_sum}} RUB SBOL {{dateLong}}. Доступно {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2 MD In: Дубль смс",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}.${month}.${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
											"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"\r",
											"// получаем данные sms\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"   \r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    // берем первый счет\r",
											"    var sms= response.json().data[0].message\r",
											"    pm.environment.set(\"sms_dabl\", sms);\r",
											"\r",
											"    console.log(\"sms_prerequest\", sms)\r",
											"    });\r",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // // берем первый счет\r",
											"    // var bank_account_admin = response.json().data[1].amount\r",
											"    // var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    // });\r",
											"    // console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    // console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1 Создание входящей транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2 MD In: № карты в смс не совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=[sms_message]Синара БанкКарта 0002 зачислено {{transaction_sum}} RUB SBOL {{dateLong}}. Доступно {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "[sms_message]Синара БанкКарта 0002 зачислено {{transaction_sum}} RUB SBOL {{dateLong}}. Доступно {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4. MD In: № карты в смс совпадает с №карты, на которую был платеж, сумма не совпадает",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=[sms_message]Синара БанкКарта 0001 зачислено 250,25 RUB SBOL {{dateLong}}. Доступно {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "[sms_message]Синара БанкКарта 0001 зачислено 250,25 RUB SBOL {{dateLong}}. Доступно {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1 MD In: № карты в смс отсутствует в списке",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=[sms_message]Синара БанкКарта 9999 зачислено {{transaction_sum}} RUB SBOL {{dateLong}}. Доступно {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "[sms_message]Синара БанкКарта 9999 зачислено {{transaction_sum}} RUB SBOL {{dateLong}}. Доступно {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2 MD In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=[sms_message]Синара БанкКарта 0001 зачислено {{transaction_sum}} RUB SBOL {{dateLong}}. Доступно {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "[sms_message]Синара БанкКарта 0001 зачислено {{transaction_sum}} RUB SBOL {{dateLong}}. Доступно {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1 Создание исходящей транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2200481700523405\",\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3 Привязка Владельцев к Исходящей. заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId_sinara}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId_sinara}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4 MD In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=[sms_message]Синара БанкКарта 0001 зачислено {{transaction_sum}} RUB SBOL {{dateLong}}. Доступно {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "[sms_message]Синара БанкКарта 0001 зачислено {{transaction_sum}} RUB SBOL {{dateLong}}. Доступно {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.5 MD Out: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR\"",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6 Подтверждение заявки Copy 7",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\":{{transaction_Id}},\r\n\t\"ownersProviderCommissions\":\r\n\t\t{\r\n\t\t\t\"{{ownerId}}\":null\r\n\t\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/done",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"done"
									]
								}
							},
							"response": []
						}
					],
					"description": "- StartFragment\n    \n- \\[sms_message\\]Синара БанкКарта 8562 зачислено 10,00 RUB SBOL 22/07/2024. Доступно 10,00 RUR\n    \n- EndFragment"
				},
				{
					"name": "Входящие var11 MD",
					"item": [
						{
							"name": "1.1 Создание входящей транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 MD In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=[sms_message]Синара БанкКарта 0001 зачислено {{transaction_sum}} RUB Tinkoff Card2Card {{dateLong}}. Доступно {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "[sms_message]Синара БанкКарта 0001 зачислено {{transaction_sum}} RUB Tinkoff Card2Card {{dateLong}}. Доступно {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2 MD In: Дубль смс",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}.${month}.${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
											"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"\r",
											"// получаем данные sms\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"   \r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    // берем первый счет\r",
											"    var sms= response.json().data[0].message\r",
											"    pm.environment.set(\"sms_dabl\", sms);\r",
											"\r",
											"    console.log(\"sms_prerequest\", sms)\r",
											"    });\r",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // // берем первый счет\r",
											"    // var bank_account_admin = response.json().data[1].amount\r",
											"    // var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    // });\r",
											"    // console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    // console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1 Создание входящей транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2 MD In: № карты в смс не совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=[sms_message]Синара БанкКарта 0002 зачислено {{transaction_sum}} RUB Tinkoff Card2Card {{dateLong}}. Доступно {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "[sms_message]Синара БанкКарта 0002 зачислено {{transaction_sum}} RUB Tinkoff Card2Card {{dateLong}}. Доступно {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4. MD In: № карты в смс совпадает с №карты, на которую был платеж, сумма не совпадает",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=[sms_message]Синара БанкКарта 0001 зачислено 250,25 RUB Tinkoff Card2Card {{dateLong}}. Доступно {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "[sms_message]Синара БанкКарта 0001 зачислено 250,25 RUB Tinkoff Card2Card {{dateLong}}. Доступно {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1 MD In: № карты в смс отсутствует в списке",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=[sms_message]Синара БанкКарта 9999 зачислено {{transaction_sum}} RUB Tinkoff Card2Card {{dateLong}}. Доступно {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "[sms_message]Синара БанкКарта 9999 зачислено {{transaction_sum}} RUB Tinkoff Card2Card {{dateLong}}. Доступно {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2 MD In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=[sms_message]Синара БанкКарта 0001 зачислено {{transaction_sum}} RUB Tinkoff Card2Card {{dateLong}}. Доступно {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "[sms_message]Синара БанкКарта 0001 зачислено {{transaction_sum}} RUB Tinkoff Card2Card {{dateLong}}. Доступно {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1 Создание исходящей транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2200481700523405\",\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3 Привязка Владельцев к Исходящей. заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId_sinara}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId_sinara}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4 MD In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=[sms_message]Синара БанкКарта 0001 зачислено {{transaction_sum}} RUB Tinkoff Card2Card {{dateLong}}. Доступно {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "[sms_message]Синара БанкКарта 0001 зачислено {{transaction_sum}} RUB Tinkoff Card2Card {{dateLong}}. Доступно {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.5 MD Out: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR\"",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6 Подтверждение заявки Copy 7",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\":{{transaction_Id}},\r\n\t\"ownersProviderCommissions\":\r\n\t\t{\r\n\t\t\t\"{{ownerId}}\":null\r\n\t\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/done",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"done"
									]
								}
							},
							"response": []
						}
					],
					"description": "- StartFragment\n    \n- \\[sms_message\\]Синара БанкКарта 9044 зачислено 1001,00 RUB Tinkoff Card2Card 22/07/2024. Доступно 1001,00 RUR\n    \n- EndFragment"
				},
				{
					"name": "Исходящие var1 GoIP",
					"item": [
						{
							"name": "1.1 Создание исходящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2200481700523405\",\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3 Привязка Владельцев к Исходящей. заявки",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId_sinara}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId_sinara}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.4 GoIP Out: № карты в смс совпадает с №карты Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0001 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.5 Подтверждение заявки",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\":{{transaction_Id}},\r\n\t\"ownersProviderCommissions\":\r\n\t\t{\r\n\t\t\t\"{{ownerId}}\":null\r\n\t\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/done",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"done"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 GoIP In: Дубль смс",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}.${month}.${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
											"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"\r",
											"// получаем данные sms\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"   \r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    // берем первый счет\r",
											"    var sms= response.json().data[0].message\r",
											"    pm.environment.set(\"sms_dabl\", sms);\r",
											"\r",
											"    console.log(\"sms_prerequest\", sms)\r",
											"    });\r",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // // берем первый счет\r",
											"    // var bank_account_admin = response.json().data[1].amount\r",
											"    // var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    // });\r",
											"    // console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    // console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1 Создание исходящей транзакции GoIP Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2200481700523405\",\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.3 Привязка Владельцев к Исходящей. заявки Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId_sinara}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId_sinara}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.4 GoIP Out: № карты в смс совпадает с № карты, сумма не совпадает",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0001 spisano 250 RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.5 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId_sinara}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId_sinara}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3.6 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId_sinara}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.7 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\": {{ownerId_sinara}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "4 GoIP Out: № карты в смс отсутствует у владельца",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 9999 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5 GoIP Out: № карты в смс не совпадает с №карты , с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0002 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1 Подтверждение заявки Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\":{{transaction_Id}},\r\n\t\"ownersProviderCommissions\":\r\n\t\t{\r\n\t\t\t\"{{ownerId}}\":null\r\n\t\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/done",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"done"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1 Создание входящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2 GoIP Out: № карты в смс совпадает с №карты",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Karta 0001 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId_sinara}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId_sinara}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId_sinara}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.5 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\": {{ownerId_sinara}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6 GoIP In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"- Карта 0001 зачислено {{transaction_sum}} RUB Tinkoff Card2Card {{dateLong}}. Доступно {{bank_account_balance}} RUR\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						}
					],
					"description": "StartFragment\n\n\\-55.50UAH, Perekaz koshtiv Perekaz za nomerom kartky, UKR, Kartka 4102**\\*5241, 26.09.23 11:01. Balans: 1744.44UAH Korysne tut: [https://sense.top/INFO](https://sense.top/INFO)\n\nEndFragment"
				},
				{
					"name": "Исходящие var1 MD",
					"item": [
						{
							"name": "1.1 Создание исходящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2200481700523405\",\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3 Привязка Владельцев к Исходящей. заявки",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId_sinara}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId_sinara}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.4 MD Out: № карты в смс совпадает с №карты Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1.5 Подтверждение заявки Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\":{{transaction_Id}},\r\n\t\"ownersProviderCommissions\":\r\n\t\t{\r\n\t\t\t\"{{ownerId}}\":null\r\n\t\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/done",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"done"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 MD In: Дубль смс",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}.${month}.${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
											"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"\r",
											"// получаем данные sms\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"   \r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    // берем первый счет\r",
											"    var sms= response.json().data[0].message\r",
											"    pm.environment.set(\"sms_dabl\", sms);\r",
											"\r",
											"    console.log(\"sms_prerequest\", sms)\r",
											"    });\r",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // // берем первый счет\r",
											"    // var bank_account_admin = response.json().data[1].amount\r",
											"    // var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    // });\r",
											"    // console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    // console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1 Создание исходящей транзакции GoIP Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2200481700523405\",\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.3 Привязка Владельцев к Исходящей. заявки Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId_sinara}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId_sinara}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.4 MD Out: № карты в смс совпадает с № карты, сумма не совпадает",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 spisano 250 RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 spisano 250 RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3.5 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId_sinara}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId_sinara}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3.6 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId_sinara}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.7 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\": {{ownerId_sinara}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "4 MD Out: № карты в смс отсутствует у владельца",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 9999 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 9999 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5 MD Out: № карты в смс не совпадает с №карты , с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0002 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0002 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1 Подтверждение заявки",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\":{{transaction_Id}},\r\n\t\"ownersProviderCommissions\":\r\n\t\t{\r\n\t\t\t\"{{ownerId}}\":null\r\n\t\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/done",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"done"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1 Создание входящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2 MD Out: № карты в смс совпадает с №карты",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 spisano {{transaction_sum}} RUB komissiya 30,00 RUB IB.SKBBANK.RU {{dateLong}} Dostupno {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId_sinara}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId_sinara}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId_sinara}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.5 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\": {{ownerId_sinara}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6 MD In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 zachisleno {{transaction_sum}} RUR {{dateLong}} Dostupno {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 zachisleno {{transaction_sum}} RUR {{dateLong}} Dostupno {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "StartFragment\n\n\\-55.50UAH, Perekaz koshtiv Perekaz za nomerom kartky, UKR, Kartka 4102**\\*5241, 26.09.23 11:01. Balans: 1744.44UAH Korysne tut: [https://sense.top/INFO](https://sense.top/INFO)\n\nEndFragment"
				},
				{
					"name": "Исходящие var2 MD",
					"item": [
						{
							"name": "1.1 Создание исходящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2200481700523405\",\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3 Привязка Владельцев к Исходящей. заявки",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId_sinara}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId_sinara}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.4 MD Out: № карты в смс совпадает с №карты Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=[sms_message]Синара БанкКарта 0001 списано {{transaction_sum}} RUB комиссия 300,00 RUB IB.SKBBANK.RU {{dateLong}} Доступно {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "[sms_message]Синара БанкКарта 0001 списано {{transaction_sum}} RUB комиссия 300,00 RUB IB.SKBBANK.RU {{dateLong}} Доступно {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1.5 Подтверждение заявки Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\":{{transaction_Id}},\r\n\t\"ownersProviderCommissions\":\r\n\t\t{\r\n\t\t\t\"{{ownerId}}\":null\r\n\t\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/done",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"done"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 MD In: Дубль смс",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}.${month}.${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"\r",
											"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
											"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"\r",
											"// получаем данные sms\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"   \r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    // берем первый счет\r",
											"    var sms= response.json().data[0].message\r",
											"    pm.environment.set(\"sms_dabl\", sms);\r",
											"\r",
											"    console.log(\"sms_prerequest\", sms)\r",
											"    });\r",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(4);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // // берем первый счет\r",
											"    // var bank_account_admin = response.json().data[1].amount\r",
											"    // var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    // });\r",
											"    // console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    // console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"goip_line\":\"{{goip_line_sinara}}\",\r\n\t//\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"SKB-SINARA\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/goip/checkSms",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"goip",
										"checkSms"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.1 Создание исходящей транзакции GoIP Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"2200481700523405\",\n    \"currencyCode\": \"RUB\"\n}\n// отключить автопривязку у клиента",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/out",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"out"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2 Привязка оператора к заявке",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"{{transaction_Id}}",
										"bind-operator-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.3 Привязка Владельцев к Исходящей. заявки Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT_operator}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId_sinara}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId_sinara}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"bind-owners-to-order"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.4 MD Out: № карты в смс совпадает с № карты, сумма не совпадает",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=[sms_message]Синара БанкКарта 0001 списано 300,25 RUB комиссия 30,00 RUB IB.SKBBANK.RU {{dateLong}} Доступно {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "[sms_message]Синара БанкКарта 0001 списано 300,25 RUB комиссия 30,00 RUB IB.SKBBANK.RU {{dateLong}} Доступно {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3.5 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId_sinara}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId_sinara}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3.6 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId_sinara}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.7 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\": {{ownerId_sinara}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "4 MD Out: № карты в смс отсутствует у владельца",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=[sms_message]Синара БанкКарта 9999 списано {{transaction_sum}} RUB комиссия 300,00 RUB IB.SKBBANK.RU {{dateLong}} Доступно {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "[sms_message]Синара БанкКарта 9999 списано {{transaction_sum}} RUB комиссия 300,00 RUB IB.SKBBANK.RU {{dateLong}} Доступно {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5 MD Out: № карты в смс не совпадает с №карты , с которой был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=[sms_message]Синара БанкКарта 0002 списано {{transaction_sum}} RUB комиссия 300,00 RUB IB.SKBBANK.RU {{dateLong}} Доступно {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "[sms_message]Синара БанкКарта 0002 списано {{transaction_sum}} RUB комиссия 300,00 RUB IB.SKBBANK.RU {{dateLong}} Доступно {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1 Подтверждение заявки Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\":{{transaction_Id}},\r\n\t\"ownersProviderCommissions\":\r\n\t\t{\r\n\t\t\t\"{{ownerId}}\":null\r\n\t\t}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/orders/done",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"orders",
										"done"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1 Создание входящей транзакции GoIP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
											"console.log(\"transaction_Id: \", jsonData.data.id)\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
											"console.log(\"transaction_sum_in: \",transaction_sum)\r",
											"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenTestMT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"144\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"RUB\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v2/order/in",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v2",
										"order",
										"in"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2 MD Out: № карты в смс совпадает с №карты",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(1);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 2000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=[sms_message]Синара БанкКарта 0001 списано {{transaction_sum}} RUB комиссия 300,00 RUB IB.SKBBANK.RU {{dateLong}} Доступно {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "[sms_message]Синара БанкКарта 0001 списано {{transaction_sum}} RUB комиссия 300,00 RUB IB.SKBBANK.RU {{dateLong}} Доступно {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3 Получить данные владельца",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"const host = pm.environment.get(\"host\");\r",
											"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"//5-утрата доверия\r",
											"var status = jsonData.data[0].status.id;\r",
											"pm.test(\"Owner should be blocked to 5\", function () {\r",
											"    pm.expect(status).to.eql(5);\r",
											"});\r",
											"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
											"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
											"\r",
											"console.log(\"owner status:\", status);\r",
											"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
											"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
											"\r",
											"if (status !== 1) {\r",
											"    var getRequest = {\r",
											"        url: `${host}/api/admin/owners/updateField`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${tokenAdmin}`,\r",
											"            'Content-Type': 'application/json',\r",
											"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
											"        }\r",
											"    };\r",
											"\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(getRequest, (error, response) => {\r",
											"            if (error) {\r",
											"                console.error(\"Error in response:\", error);\r",
											"            }\r",
											"\r",
											"            pm.test('Owners data response should be 200', () => {\r",
											"                pm.expect(error).to.be.null;\r",
											"                pm.expect(response).to.have.status(200);\r",
											"                console.log(\"Owner status was changed to 1\")\r",
											"            });\r",
											"        });\r",
											"    }, 500);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId_sinara}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										""
									],
									"query": [
										{
											"key": "ownerId",
											"value": "{{ownerId_sinara}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4 Входящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId_sinara}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.5 Исходящие транзакции",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\": {{ownerId_sinara}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6 MD In: № карты в смс совпадает с №карты, на которую был платеж",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function formatDate() {\r",
											"    // \r",
											"\tconst date = new Date();\r",
											"    const hours = String(date.getHours()).padStart(2, '0');\r",
											"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
											"    const curTime = `${hours}:${minutes}`;\r",
											"    //\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const year = date.getFullYear();\r",
											"    const shortYear = String(year).slice(-2);\r",
											"\r",
											"    // Форматируем дату\r",
											"    const dateShort = `${day}.${month}.${shortYear}`;\r",
											"    const dateLong = `${day}/${month}/${year}`;\r",
											"\r",
											"    return { dateShort, dateLong, curTime };\r",
											"}\r",
											"const { dateShort, dateLong, curTime } = formatDate();\r",
											"//\r",
											"pm.environment.set(\"currentTime\", curTime);\r",
											"pm.environment.set(\"dateShort\", dateShort);\r",
											"pm.environment.set(\"dateLong\", dateLong);\r",
											"\r",
											"//\r",
											"var bank_account_balance = Math.floor(50000 + Math.random() * 9000) + 0.25\r",
											"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
											"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"console.log(\"SMS transaction sum:\", transaction_sum)\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var host = pm.collectionVariables.get(\"host\");\r",
											"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
											"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
											"var ownerId = pm.environment.get(\"ownerId_sinara\");\r",
											"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
											"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
											"//\r",
											"//\r",
											"function formatDate(date) {\r",
											"    const year = date.getFullYear();\r",
											"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
											"    const day = String(date.getDate()).padStart(2, '0');\r",
											"    return `${year}-${month}-${day}`;\r",
											"}\r",
											"const currentDate = new Date();\r",
											"const nextCurrentDate = new Date(currentDate);\r",
											"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
											"\r",
											"let current_date = formatDate(currentDate);\r",
											"let nextCurrent_date = formatDate(nextCurrentDate);\r",
											"//\r",
											"// получаем транзакции по владельцу\r",
											"var getRequest1 = {\r",
											"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenTestMT}`\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest1, (error, response1) => {\r",
											"    pm.test('Transaction data response should be 200', () => {\r",
											"        pm.expect(response1.code).to.equal(200);\r",
											"    });\r",
											"    // проверяем наличие транзакции\r",
											"    const responseData = response1.json();\r",
											"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
											"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
											"        pm.expect(transaction_id).to.exist;\r",
											"    });\r",
											"    if (foundItem) {\r",
											"        // Если найден, проверяем его статус\r",
											"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
											"            const statusId = foundItem.status.id;\r",
											"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
											"            pm.expect(statusId).to.be.equal(2);\r",
											"        });\r",
											"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
											"            const transactionAmount = foundItem.amount;\r",
											"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
											"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
											"            console.log(`Value of transaction: ${transaction_sum}`);\r",
											"        });\r",
											"\r",
											"    } else {\r",
											"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
											"    }\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											"// получаем данные по владельцу, его фактический баланс\r",
											"var getRequest = {\r",
											"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Authorization': `Bearer ${tokenAdmin}`\r",
											"  },\r",
											"  body: {\r",
											"  }\r",
											"};\r",
											"setTimeout(() => {\r",
											"    pm.sendRequest(getRequest, (error, response) => {\r",
											"        if (error) {\r",
											"        console.log(error);\r",
											"    }\r",
											"    //\r",
											"    pm.test('Owners data response should be 200', () => {\r",
											"        pm.expect(error).to.equal(null);\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        pm.expect(response).to.have.property('status', 'OK');\r",
											"    });\r",
											"    // берем первый счет\r",
											"    var bank_account_admin = response.json().data[1].amount\r",
											"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
											"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
											"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
											"    });\r",
											"    console.log(\"bank_account_admin\", bank_account_admin)\r",
											"    console.log(\"bank_account_balance\", bank_account_balance)\r",
											"    });\r",
											"}, 3000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/macrodroid/checkSms?imei={{owner_imei_sinara}}&text=- Karta 0001 zachisleno {{transaction_sum}} RUR {{dateLong}} Dostupno {{bank_account_balance}} RUR",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"macrodroid",
										"checkSms"
									],
									"query": [
										{
											"key": "imei",
											"value": "{{owner_imei_sinara}}"
										},
										{
											"key": "text",
											"value": "- Karta 0001 zachisleno {{transaction_sum}} RUR {{dateLong}} Dostupno {{bank_account_balance}} RUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.7 Обновление статуса 1 Copy 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ownerId\":{{ownerId_sinara}},\r\n    \"status\":0\r\n    //\"incommingTransactionsIsAllowed\":true,\r\n    //\"outcommingTransactionsIsAllowed\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/admin/owners/updateField",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"owners",
										"updateField"
									]
								}
							},
							"response": []
						}
					],
					"description": "StartFragment\n\n\\[sms_message\\]Синара БанкКарта 3230 списано 20300,00 RUB комиссия 300,00 RUB [IB.SKBBANK.RU](http://ib.skbbank.ru/) 16/07/2024 Доступно 28563,20 RUR\n\nEndFragment"
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{tokenAdmin}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "https://websitewizard.ru",
			"type": "string"
		},
		{
			"value": "",
			"type": "string",
			"disabled": true
		}
	]
}