{
	"info": {
		"_postman_id": "01f0b5d9-c22c-4c25-9794-4a246195326e",
		"name": "(SMS_in_GOIP_Sens) Тестирование API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24214897"
	},
	"item": [
		{
			"name": "Владельцы",
			"item": [
				{
					"name": "Парсинг СМС",
					"item": [
						{
							"name": "Входящие",
							"item": [
								{
									"name": "Входящие var1",
									"item": [
										{
											"name": "1.1 Создание входящей транзакции GoIP",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();\r",
															"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
															"console.log(\"transaction_Id: \", jsonData.data.id)\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
															"console.log(\"transaction_sum_in: \",transaction_sum)\r",
															"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenTestMT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"57\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"UAH\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v2/order/in",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v2",
														"order",
														"in"
													]
												}
											},
											"response": []
										},
										{
											"name": "1.2 GoIP In: № карты в смс совпадает с №карты, на которую был платеж",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"//\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(2);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    var bank_account_admin = response.json().data[1].amount\r",
															"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    });\r",
															"    console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"Kartka {{owner_sens_card1}} uspishna operaciya +{{transaction_sum}}UAH {{dateShort}} {{currentTime}} SHLYAHOVA, TETYANA, UA Balans:{{bank_account_balance}}UAH Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "2 GoIP In: Дубль смс",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"\r",
															"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
															"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"\r",
															"// получаем данные sms\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"   \r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    // берем первый счет\r",
															"    var sms= response.json().data[0].message\r",
															"    pm.environment.set(\"sms_dabl\", sms);\r",
															"\r",
															"    console.log(\"sms_prerequest\", sms)\r",
															"    });\r",
															"}, 1000);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(2);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // // берем первый счет\r",
															"    // var bank_account_admin = response.json().data[1].amount\r",
															"    // var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    // });\r",
															"    // console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    // console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "3.1 Создание входящей транзакции GoIP 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();\r",
															"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
															"console.log(\"transaction_Id: \", jsonData.data.id)\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
															"console.log(\"transaction_sum_in: \",transaction_sum)\r",
															"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenTestMT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"57\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"UAH\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v2/order/in",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v2",
														"order",
														"in"
													]
												}
											},
											"response": []
										},
										{
											"name": "3.2 GoIP In: № карты в смс не совпадает с №карты, на которую был платеж",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(1);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    var bank_account_admin = response.json().data[1].amount\r",
															"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    });\r",
															"    console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"Kartka {{owner_sens_card2}} uspishna operaciya +{{transaction_sum}}UAH {{dateShort}} {{currentTime}} SHLYAHOVA, TETYANA, UA Balans:{{bank_account_balance}}UAH Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "4. GoIP In: № карты в смс совпадает с №карты, на которую был платеж, сумма не совпадает",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(1);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    var bank_account_admin = response.json().data[1].amount\r",
															"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    });\r",
															"    console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"Kartka {{owner_sens_card1}} uspishna operaciya +100.00UAH {{dateShort}} {{currentTime}} SHLYAHOVA, TETYANA, UA Balans:{{bank_account_balance}}UAH Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "5.1 GoIP In: № карты в смс отсутствует в списке",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000)\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(1);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    var bank_account_admin = response.json().data[1].amount\r",
															"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
															"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
															"    });\r",
															"    console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"Kartka 4102***5241 uspishna operaciya +{{transaction_sum}}UAH {{dateShort}} {{currentTime}} SHLYAHOVA, TETYANA, UA Balans:{{bank_account_balance}}UAH Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "5.2 GoIP In: № карты в смс совпадает с №карты, на которую был платеж Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(2);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    var bank_account_admin = response.json().data[1].amount\r",
															"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    });\r",
															"    console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"Kartka {{owner_sens_card1}} uspishna operaciya +{{transaction_sum}}UAH {{dateShort}} {{currentTime}} SHLYAHOVA, TETYANA, UA Balans:{{bank_account_balance}}UAH Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "6.1 Создание исходящей транзакции GoIP",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();\r",
															"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
															"console.log(\"transaction_Id: \", jsonData.data.id)\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
															"console.log(\"transaction_sum_in: \",transaction_sum)\r",
															"pm.environment.set(\"transaction_sum\", transaction_sum);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenTestMT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"4102321700523405\",\n    \"currencyCode\": \"UAH\"\n}\n// отключить автопривязку у клиента",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v2/order/out",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v2",
														"order",
														"out"
													]
												}
											},
											"response": []
										},
										{
											"name": "6.2 Привязка оператора к заявке",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenTestMT_operator}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"admin",
														"orders",
														"{{transaction_Id}}",
														"bind-operator-to-order"
													]
												}
											},
											"response": []
										},
										{
											"name": "6.3 Привязка Владельцев к Исходящей. заявки Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenTestMT_operator}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId_sens}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId2_sens}}\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"admin",
														"orders",
														"bind-owners-to-order"
													]
												}
											},
											"response": []
										},
										{
											"name": "6.4 GoIP In: № карты в смс совпадает с №карты, но платеж ИС Х",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(1);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    var bank_account_admin = response.json().data[1].amount\r",
															"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    });\r",
															"    console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"Kartka {{owner_sens_card1}} uspishna operaciya +{{transaction_sum}}UAH {{dateShort}} {{currentTime}} SHLYAHOVA, TETYANA, UA Balans:{{bank_account_balance}}UAH Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "6.5 GoIP Out: № карты в смс совпадает с №карты",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(4);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 2000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    var bank_account_admin = response.json().data[1].amount\r",
															"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    });\r",
															"    console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"-{{transaction_sum}}UAH, Perekaz koshtiv Perekaz za nomerom kartky, UKR, Kartka {{owner_sens_card1}}, {{dateShort}} {{currentTime}}. Balans: {{bank_account_balance}}UAH Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\n16973.00UAH Perekaz cherez dodatok Pryvat24. Vidpravnyk: Zamishailo Mariia Dmytrivna  \n4\\*04 14:59  \nBal. 68165.05UAH\\[notification\\]\n\nEndFragment"
								},
								{
									"name": "Входящие var2",
									"item": [
										{
											"name": "1.1 Создание входящей транзакции GoIP",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();\r",
															"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
															"console.log(\"transaction_Id: \", jsonData.data.id)\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
															"console.log(\"transaction_sum_in: \",transaction_sum)\r",
															"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenTestMT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"57\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"UAH\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v2/order/in",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v2",
														"order",
														"in"
													]
												}
											},
											"response": []
										},
										{
											"name": "1.2 GoIP In: № карты в смс совпадает с №карты, на которую был платеж",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"//\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(2);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    var bank_account_admin = response.json().data[1].amount\r",
															"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    });\r",
															"    console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"Kartka {{owner_sens_card1}} uspishna operaciya +{{transaction_sum}}UAH {{dateShort}} {{currentTime}} P24 *Verman Daniel, UA Balans:{{bank_account_balance}}UAH Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "2 GoIP In: Дубль смс",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"\r",
															"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
															"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"\r",
															"// получаем данные sms\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"   \r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    // берем первый счет\r",
															"    var sms= response.json().data[0].message\r",
															"    pm.environment.set(\"sms_dabl\", sms);\r",
															"\r",
															"    console.log(\"sms_prerequest\", sms)\r",
															"    });\r",
															"}, 1000);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(2);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // // берем первый счет\r",
															"    // var bank_account_admin = response.json().data[1].amount\r",
															"    // var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    // });\r",
															"    // console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    // console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "3.1 Создание входящей транзакции GoIP 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();\r",
															"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
															"console.log(\"transaction_Id: \", jsonData.data.id)\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
															"console.log(\"transaction_sum_in: \",transaction_sum)\r",
															"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenTestMT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"57\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"UAH\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v2/order/in",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v2",
														"order",
														"in"
													]
												}
											},
											"response": []
										},
										{
											"name": "3.2 GoIP In: № карты в смс не совпадает с №карты, на которую был платеж",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(1);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    var bank_account_admin = response.json().data[1].amount\r",
															"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    });\r",
															"    console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"Kartka {{owner_sens_card2}} uspishna operaciya +{{transaction_sum}}UAH {{dateShort}} {{currentTime}} P24 *Verman Daniel, UA Balans:{{bank_account_balance}}UAH Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "4. GoIP In: № карты в смс совпадает с №карты, на которую был платеж, сумма не совпадает",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(1);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    var bank_account_admin = response.json().data[1].amount\r",
															"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    });\r",
															"    console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"Kartka {{owner_sens_card1}} uspishna operaciya +100.00UAH {{dateShort}} {{currentTime}} P24 *Verman Daniel, UA Balans:{{bank_account_balance}}UAH Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "5.1 GoIP In: № карты в смс отсутствует в списке",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000)\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(1);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    var bank_account_admin = response.json().data[1].amount\r",
															"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
															"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
															"    });\r",
															"    console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"Kartka 4028***0705 uspishna operaciya +{{transaction_sum}}UAH {{dateShort}} {{currentTime}} P24 *Verman Daniel, UA Balans:{{bank_account_balance}}UAH Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "5.2 GoIP In: № карты в смс совпадает с №карты, на которую был платеж Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(2);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    var bank_account_admin = response.json().data[1].amount\r",
															"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    });\r",
															"    console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"Kartka {{owner_sens_card1}} uspishna operaciya +{{transaction_sum}}UAH {{dateShort}} {{currentTime}} P24 *Verman Daniel, UA Balans:{{bank_account_balance}}UAH Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "6.1 Создание исходящей транзакции GoIP",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();\r",
															"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
															"console.log(\"transaction_Id: \", jsonData.data.id)\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
															"console.log(\"transaction_sum_in: \",transaction_sum)\r",
															"pm.environment.set(\"transaction_sum\", transaction_sum);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenTestMT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"4102321700523405\",\n    \"currencyCode\": \"UAH\"\n}\n// отключить автопривязку у клиента",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v2/order/out",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v2",
														"order",
														"out"
													]
												}
											},
											"response": []
										},
										{
											"name": "6.2 Привязка оператора к заявке",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenTestMT_operator}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"admin",
														"orders",
														"{{transaction_Id}}",
														"bind-operator-to-order"
													]
												}
											},
											"response": []
										},
										{
											"name": "6.3 Привязка Владельцев к Исходящей. заявки Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenTestMT_operator}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId_sens}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId2_sens}}\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"admin",
														"orders",
														"bind-owners-to-order"
													]
												}
											},
											"response": []
										},
										{
											"name": "6.4 GoIP In: № карты в смс совпадает с №карты, но платеж ИС Х",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(1);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    var bank_account_admin = response.json().data[1].amount\r",
															"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    });\r",
															"    console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"Kartka {{owner_sens_card1}} uspishna operaciya +{{transaction_sum}}UAH {{dateShort}} {{currentTime}} P24 *Verman Daniel, UA Balans:{{bank_account_balance}}UAH Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "6.5 GoIP Out: № карты в смс совпадает с №карты",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(4);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 2000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    var bank_account_admin = response.json().data[1].amount\r",
															"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    });\r",
															"    console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"-{{transaction_sum}}UAH, Perekaz koshtiv Perekaz za nomerom kartky, UKR, Kartka {{owner_sens_card1}}, {{dateShort}} {{currentTime}}. Balans: {{bank_account_balance}}UAH Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\nKartka 4028**\\*0705 uspishna operaciya +1.00UAH 08.11.23 07:34 P24 \\*Verman Daniel, UA Balans:21507.80UAH Korysne tut: https://sense.top/INFO\n\nEndFragment"
								},
								{
									"name": "Входящие var3",
									"item": [
										{
											"name": "1.1 Создание входящей транзакции GoIP",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();\r",
															"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
															"console.log(\"transaction_Id: \", jsonData.data.id)\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
															"console.log(\"transaction_sum_in: \",transaction_sum)\r",
															"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenTestMT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"57\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"UAH\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v2/order/in",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v2",
														"order",
														"in"
													]
												}
											},
											"response": []
										},
										{
											"name": "1.2 GoIP In: № карты в смс совпадает с №карты, на которую был платеж",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"//\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(2);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    var bank_account_admin = response.json().data[1].amount\r",
															"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    });\r",
															"    console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"Kartka {{owner_sens_card1}} uspishna operaciya +{{transaction_sum}}UAH {{dateShort}} {{currentTime}} MONOULANOV KIRIL, UA Balans:{{bank_account_balance}}UAH Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "2 GoIP In: Дубль смс",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"\r",
															"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
															"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"\r",
															"// получаем данные sms\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"   \r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    // берем первый счет\r",
															"    var sms= response.json().data[0].message\r",
															"    pm.environment.set(\"sms_dabl\", sms);\r",
															"\r",
															"    console.log(\"sms_prerequest\", sms)\r",
															"    });\r",
															"}, 1000);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(2);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // // берем первый счет\r",
															"    // var bank_account_admin = response.json().data[1].amount\r",
															"    // var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    // });\r",
															"    // console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    // console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "3.1 Создание входящей транзакции GoIP 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();\r",
															"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
															"console.log(\"transaction_Id: \", jsonData.data.id)\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
															"console.log(\"transaction_sum_in: \",transaction_sum)\r",
															"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenTestMT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"57\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"UAH\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v2/order/in",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v2",
														"order",
														"in"
													]
												}
											},
											"response": []
										},
										{
											"name": "3.2 GoIP In: № карты в смс не совпадает с №карты, на которую был платеж",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(1);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    var bank_account_admin = response.json().data[1].amount\r",
															"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    });\r",
															"    console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"Kartka {{owner_sens_card2}} uspishna operaciya +{{transaction_sum}}UAH {{dateShort}} {{currentTime}} MONOULANOV KIRIL, UA Balans:{{bank_account_balance}}UAH Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "4. GoIP In: № карты в смс совпадает с №карты, на которую был платеж, сумма не совпадает",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(1);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    var bank_account_admin = response.json().data[1].amount\r",
															"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    });\r",
															"    console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"Kartka {{owner_sens_card1}} uspishna operaciya +100.00UAH {{dateShort}} {{currentTime}} MONOULANOV KIRIL, UA Balans:{{bank_account_balance}}UAH Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "5.1 GoIP In: № карты в смс отсутствует в списке",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000)\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(1);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    var bank_account_admin = response.json().data[1].amount\r",
															"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
															"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
															"    });\r",
															"    console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"Kartka 4028***0705 uspishna operaciya +{{transaction_sum}}UAH {{dateShort}} {{currentTime}} MONOULANOV KIRIL, UA Balans:{{bank_account_balance}}UAH Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "5.2 GoIP In: № карты в смс совпадает с №карты, на которую был платеж Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(2);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    var bank_account_admin = response.json().data[1].amount\r",
															"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    });\r",
															"    console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"Kartka {{owner_sens_card1}} uspishna operaciya +{{transaction_sum}}UAH {{dateShort}} {{currentTime}} MONOULANOV KIRIL, UA Balans:{{bank_account_balance}}UAH Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "6.1 Создание исходящей транзакции GoIP",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();\r",
															"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
															"console.log(\"transaction_Id: \", jsonData.data.id)\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
															"console.log(\"transaction_sum_in: \",transaction_sum)\r",
															"pm.environment.set(\"transaction_sum\", transaction_sum);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenTestMT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"4102321700523405\",\n    \"currencyCode\": \"UAH\"\n}\n// отключить автопривязку у клиента",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v2/order/out",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v2",
														"order",
														"out"
													]
												}
											},
											"response": []
										},
										{
											"name": "6.2 Привязка оператора к заявке",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenTestMT_operator}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"admin",
														"orders",
														"{{transaction_Id}}",
														"bind-operator-to-order"
													]
												}
											},
											"response": []
										},
										{
											"name": "6.3 Привязка Владельцев к Исходящей. заявки Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenTestMT_operator}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId_sens}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId2_sens}}\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"admin",
														"orders",
														"bind-owners-to-order"
													]
												}
											},
											"response": []
										},
										{
											"name": "6.4 GoIP In: № карты в смс совпадает с №карты, но платеж ИС Х",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(1);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    var bank_account_admin = response.json().data[1].amount\r",
															"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    });\r",
															"    console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"Kartka {{owner_sens_card1}} uspishna operaciya +{{transaction_sum}}UAH {{dateShort}} {{currentTime}} MONOULANOV KIRIL, UA Balans:{{bank_account_balance}}UAH Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "6.5 GoIP Out: № карты в смс совпадает с №карты",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(4);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 2000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    var bank_account_admin = response.json().data[1].amount\r",
															"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    });\r",
															"    console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"-{{transaction_sum}}UAH, Perekaz koshtiv Perekaz za nomerom kartky, UKR, Kartka {{owner_sens_card1}}, {{dateShort}} {{currentTime}}. Balans: {{bank_account_balance}}UAH Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\nKartka 4028**\\*0705 uspishna operaciya +2200.00UAH 04.11.23 20:11 MONOULANOV KIRIL, UA Balans:21506.80UAH Korysne tut: https://sense.top/INFO\n\nEndFragment"
								},
								{
									"name": "Входящие var4",
									"item": [
										{
											"name": "1.1 Создание входящей транзакции GoIP",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();\r",
															"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
															"console.log(\"transaction_Id: \", jsonData.data.id)\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
															"console.log(\"transaction_sum_in: \",transaction_sum)\r",
															"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenTestMT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"57\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"UAH\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v2/order/in",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v2",
														"order",
														"in"
													]
												}
											},
											"response": []
										},
										{
											"name": "1.2 GoIP In: № карты в смс совпадает с №карты, на которую был платеж",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"//\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(2);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    // var bank_account_admin = response.json().data[1].amount\r",
															"    // var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    // });\r",
															"    // console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    // console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"Kartka {{owner_sens_card1}} popovnennya +{{transaction_sum}}UAH {{dateShort}} {{currentTime}} vid kartky 53556732 cherez Perekaz z kartky na kartku, UKR Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "2 GoIP In: Дубль смс",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"\r",
															"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
															"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"\r",
															"// получаем данные sms\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"   \r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    // берем первый счет\r",
															"    var sms= response.json().data[0].message\r",
															"    pm.environment.set(\"sms_dabl\", sms);\r",
															"\r",
															"    console.log(\"sms_prerequest\", sms)\r",
															"    });\r",
															"}, 1000);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(2);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // // берем первый счет\r",
															"    // var bank_account_admin = response.json().data[1].amount\r",
															"    // var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    // });\r",
															"    // console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    // console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "3.1 Создание входящей транзакции GoIP 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();\r",
															"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
															"console.log(\"transaction_Id: \", jsonData.data.id)\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
															"console.log(\"transaction_sum_in: \",transaction_sum)\r",
															"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenTestMT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"57\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"UAH\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v2/order/in",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v2",
														"order",
														"in"
													]
												}
											},
											"response": []
										},
										{
											"name": "3.2 GoIP In: № карты в смс не совпадает с №карты, на которую был платеж",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(1);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    // var bank_account_admin = response.json().data[1].amount\r",
															"    // var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    // });\r",
															"    // console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    // console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"Kartka {{owner_sens_card2}} popovnennya +{{transaction_sum}}UAH {{dateShort}} {{currentTime}} vid kartky 53556732 cherez Perekaz z kartky na kartku, UKR Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "4. GoIP In: № карты в смс совпадает с №карты, на которую был платеж, сумма не совпадает",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(1);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    // var bank_account_admin = response.json().data[1].amount\r",
															"    // var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    // });\r",
															"    // console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    // console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"Kartka {{owner_sens_card1}} popovnennya +100.00UAH {{dateShort}} {{currentTime}} vid kartky 53556732 cherez Perekaz z kartky na kartku, UKR Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "5.1 GoIP In: № карты в смс отсутствует в списке",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000)\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(1);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    // var bank_account_admin = response.json().data[1].amount\r",
															"    // var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
															"    //     pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
															"    // });\r",
															"    // console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    // console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"Kartka 4028***0705 popovnennya +{{transaction_sum}}UAH {{dateShort}} {{currentTime}} vid kartky 53556732 cherez Perekaz z kartky na kartku, UKR Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "5.2 GoIP In: № карты в смс совпадает с №карты, на которую был платеж Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(2);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    // var bank_account_admin = response.json().data[1].amount\r",
															"    // var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    // });\r",
															"    // console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    // console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"Kartka {{owner_sens_card1}} popovnennya +{{transaction_sum}}UAH {{dateShort}} {{currentTime}} vid kartky 53556732 cherez Perekaz z kartky na kartku, UKR Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "6.1 Создание исходящей транзакции GoIP",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();\r",
															"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
															"console.log(\"transaction_Id: \", jsonData.data.id)\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
															"console.log(\"transaction_sum_in: \",transaction_sum)\r",
															"pm.environment.set(\"transaction_sum\", transaction_sum);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenTestMT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"4102321700523405\",\n    \"currencyCode\": \"UAH\"\n}\n// отключить автопривязку у клиента",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v2/order/out",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v2",
														"order",
														"out"
													]
												}
											},
											"response": []
										},
										{
											"name": "6.2 Привязка оператора к заявке",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenTestMT_operator}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"admin",
														"orders",
														"{{transaction_Id}}",
														"bind-operator-to-order"
													]
												}
											},
											"response": []
										},
										{
											"name": "6.3 Привязка Владельцев к Исходящей. заявки Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenTestMT_operator}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId_sens}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId2_sens}}\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"admin",
														"orders",
														"bind-owners-to-order"
													]
												}
											},
											"response": []
										},
										{
											"name": "6.4 GoIP In: № карты в смс совпадает с №карты, но платеж ИС Х",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(1);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    // var bank_account_admin = response.json().data[1].amount\r",
															"    // var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    // });\r",
															"    // console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    // console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"Kartka {{owner_sens_card1}} popovnennya +{{transaction_sum}}UAH {{dateShort}} {{currentTime}} vid kartky 53556732 cherez Perekaz z kartky na kartku, UKR Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "6.5 GoIP Out: № карты в смс совпадает с №карты",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(4);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 2000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    // var bank_account_admin = response.json().data[1].amount\r",
															"    // var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    // });\r",
															"    // console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    // console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"-{{transaction_sum}}UAH, Perekaz koshtiv Perekaz za nomerom kartky, UKR, Kartka {{owner_sens_card1}}, {{dateShort}} {{currentTime}}. Balans: {{bank_account_balance}}UAH Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\nKartka 4028**\\*0705 popovnennya +1300.00UAH 03.11.23 04:52 vid kartky 53556732 cherez Perekaz z kartky na kartku, UKR Korysne tut: https://sense.top/INFO\n\nEndFragment"
								},
								{
									"name": "Входящие var5",
									"item": [
										{
											"name": "1.1 Создание входящей транзакции GoIP",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();\r",
															"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
															"console.log(\"transaction_Id: \", jsonData.data.id)\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
															"console.log(\"transaction_sum_in: \",transaction_sum)\r",
															"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenTestMT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"57\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"UAH\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v2/order/in",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v2",
														"order",
														"in"
													]
												}
											},
											"response": []
										},
										{
											"name": "1.2 GoIP In: № карты в смс совпадает с №карты, на которую был платеж",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"//\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(2);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    var bank_account_admin = response.json().data[1].amount\r",
															"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    });\r",
															"    console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"Kartka {{owner_sens_card1}} uspishna operaciya +{{transaction_sum}}UAH {{dateShort}} {{currentTime}} MyBank365, UA Dostupno:{{bank_account_balance}}UAH Korysne tut: https://sense.top/info\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "2 GoIP In: Дубль смс",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"\r",
															"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
															"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"\r",
															"// получаем данные sms\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"   \r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    // берем первый счет\r",
															"    var sms= response.json().data[0].message\r",
															"    pm.environment.set(\"sms_dabl\", sms);\r",
															"\r",
															"    console.log(\"sms_prerequest\", sms)\r",
															"    });\r",
															"}, 1000);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(2);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // // берем первый счет\r",
															"    // var bank_account_admin = response.json().data[1].amount\r",
															"    // var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    // });\r",
															"    // console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    // console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"{{sms_dabl}}\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "3.1 Создание входящей транзакции GoIP 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();\r",
															"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
															"console.log(\"transaction_Id: \", jsonData.data.id)\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
															"console.log(\"transaction_sum_in: \",transaction_sum)\r",
															"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenTestMT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"57\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"UAH\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v2/order/in",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v2",
														"order",
														"in"
													]
												}
											},
											"response": []
										},
										{
											"name": "3.2 GoIP In: № карты в смс не совпадает с №карты, на которую был платеж",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(1);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    var bank_account_admin = response.json().data[1].amount\r",
															"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    });\r",
															"    console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"Kartka {{owner_sens_card2}} uspishna operaciya +{{transaction_sum}}UAH {{dateShort}} {{currentTime}} MyBank365, UA Dostupno:{{bank_account_balance}}UAH Korysne tut: https://sense.top/info\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "4. GoIP In: № карты в смс совпадает с №карты, на которую был платеж, сумма не совпадает",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(1);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    var bank_account_admin = response.json().data[1].amount\r",
															"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    });\r",
															"    console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"Kartka {{owner_sens_card1}} uspishna operaciya +100.00UAH {{dateShort}} {{currentTime}} MyBank365, UA Dostupno:{{bank_account_balance}}UAH Korysne tut: https://sense.top/info\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "5.1 GoIP In: № карты в смс отсутствует в списке",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000)\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(1);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    var bank_account_admin = response.json().data[1].amount\r",
															"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} НЕ совпадают`, () => {\r",
															"        pm.expect(bank_account_admin).to.not.equal(bank_account_balance)\r",
															"    });\r",
															"    console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"Kartka 4028***0705 uspishna operaciya +{{transaction_sum}}UAH {{dateShort}} {{currentTime}} MyBank365, UA Dostupno:{{bank_account_balance}}UAH Korysne tut: https://sense.top/info\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "5.2 GoIP In: № карты в смс совпадает с №карты, на которую был платеж Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(2);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    var bank_account_admin = response.json().data[1].amount\r",
															"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    });\r",
															"    console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"Kartka {{owner_sens_card1}} uspishna operaciya +{{transaction_sum}}UAH {{dateShort}} {{currentTime}} MyBank365, UA Dostupno:{{bank_account_balance}}UAH Korysne tut: https://sense.top/info\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "6.1 Создание исходящей транзакции GoIP",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();\r",
															"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
															"console.log(\"transaction_Id: \", jsonData.data.id)\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
															"console.log(\"transaction_sum_in: \",transaction_sum)\r",
															"pm.environment.set(\"transaction_sum\", transaction_sum);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenTestMT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"4102321700523405\",\n    \"currencyCode\": \"UAH\"\n}\n// отключить автопривязку у клиента",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v2/order/out",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v2",
														"order",
														"out"
													]
												}
											},
											"response": []
										},
										{
											"name": "6.2 Привязка оператора к заявке",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenTestMT_operator}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"admin",
														"orders",
														"{{transaction_Id}}",
														"bind-operator-to-order"
													]
												}
											},
											"response": []
										},
										{
											"name": "6.3 Привязка Владельцев к Исходящей. заявки Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenTestMT_operator}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId_sens}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId2_sens}}\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"admin",
														"orders",
														"bind-owners-to-order"
													]
												}
											},
											"response": []
										},
										{
											"name": "6.4 GoIP In: № карты в смс совпадает с №карты, но платеж ИС Х",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(1);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    var bank_account_admin = response.json().data[1].amount\r",
															"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    });\r",
															"    console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"Kartka {{owner_sens_card1}} uspishna operaciya +{{transaction_sum}}UAH {{dateShort}} {{currentTime}} MyBank365, UA Dostupno:{{bank_account_balance}}UAH Korysne tut: https://sense.top/info\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "6.5 GoIP Out: № карты в смс совпадает с №карты",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(4);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 2000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    var bank_account_admin = response.json().data[1].amount\r",
															"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    });\r",
															"    console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"-{{transaction_sum}}UAH, Perekaz koshtiv Perekaz za nomerom kartky, UKR, Kartka {{owner_sens_card1}}, {{dateShort}} {{currentTime}}. Balans: {{bank_account_balance}}UAH Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\nKartka 4028**\\*0705 uspishna operaciya +1.00UAH 01.11.23 05:54 MyBank365, UA Dostupno:1005.80UAH Korysne tut: https://sense.top/info\n\nEndFragment"
								},
								{
									"name": "Исходящие var1",
									"item": [
										{
											"name": "1.1 Создание исходящей транзакции GoIP Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();\r",
															"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
															"console.log(\"transaction_Id: \", jsonData.data.id)\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
															"console.log(\"transaction_sum_in: \",transaction_sum)\r",
															"pm.environment.set(\"transaction_sum\", transaction_sum);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenTestMT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"4102321700523405\",\n    \"currencyCode\": \"UAH\"\n}\n// отключить автопривязку у клиента",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v2/order/out",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v2",
														"order",
														"out"
													]
												}
											},
											"response": []
										},
										{
											"name": "1.2 Привязка оператора к заявке",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenTestMT_operator}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"admin",
														"orders",
														"{{transaction_Id}}",
														"bind-operator-to-order"
													]
												}
											},
											"response": []
										},
										{
											"name": "1.3 Привязка Владельцев к Исходящей. заявки",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenTestMT_operator}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId_sens}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId2_sens}}\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"admin",
														"orders",
														"bind-owners-to-order"
													]
												}
											},
											"response": []
										},
										{
											"name": "1.4 GoIP Out: № карты в смс совпадает с №карты",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(4);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 4000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    var bank_account_admin = response.json().data[1].amount\r",
															"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    });\r",
															"    console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 5000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"-{{transaction_sum}}UAH, Perekaz koshtiv Perekaz za nomerom kartky, UKR, Kartka {{owner_sens_card1}}, {{dateShort}} {{currentTime}}. Balans: {{bank_account_balance}}UAH Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "2 GoIP Out: Дубль смс",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"// var bank_account_balance = Math.floor(Math.random() * 900000)\r",
															"// pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"// console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"// var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"// console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"\r",
															"// получаем данные sms\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/owners/sms?ownerId=${ownerId}&page=1`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"   \r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    // берем первый счет\r",
															"    var sms= response.json().data[0].message\r",
															"    pm.environment.set(\"sms_dabl\", sms);\r",
															"\r",
															"    console.log(\"sms_prerequest\", sms)\r",
															"    });\r",
															"}, 1000);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(4);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    // pm.test('Owners data response should be 200', () => {\r",
															"    //     pm.expect(error).to.equal(null);\r",
															"    //     pm.expect(response).to.have.property('code', 200);\r",
															"    //     pm.expect(response).to.have.property('status', 'OK');\r",
															"    // });\r",
															"    // // берем первый счет\r",
															"    // var bank_account_admin = response.json().data[1].amount\r",
															"    // var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    // pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"    //     pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    // });\r",
															"    // console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    // console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"-{{transaction_sum}}UAH, Perekaz koshtiv Perekaz za nomerom kartky, UKR, Kartka {{owner_sens_card1}}, {{dateShort}} {{currentTime}}. Balans: {{bank_account_balance}}UAH Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "3.1 Создание исходящей транзакции GoIP",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();\r",
															"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
															"console.log(\"transaction_Id: \", jsonData.data.id)\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var transaction_sum = Math.floor(1000 + Math.random() * 9000)\r",
															"console.log(\"transaction_sum_in: \",transaction_sum)\r",
															"pm.environment.set(\"transaction_sum\", transaction_sum);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenTestMT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerCard\": \"4102321700523405\",\n    \"currencyCode\": \"UAH\"\n}\n// отключить автопривязку у клиента",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v2/order/out",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v2",
														"order",
														"out"
													]
												}
											},
											"response": []
										},
										{
											"name": "3.2 Привязка оператора к заявке",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenTestMT_operator}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{host}}/api/admin/orders/{{transaction_Id}}/bind-operator-to-order",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"admin",
														"orders",
														"{{transaction_Id}}",
														"bind-operator-to-order"
													]
												}
											},
											"response": []
										},
										{
											"name": "3.3 Привязка Владельцев к Исходящей. заявки",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenTestMT_operator}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"transactionId\": {{transaction_Id}},\n    \"owners\": [\n        {\n            \"ownerId\":{{ownerId_sens}},\n            \"sum\": {{transaction_sum}},\n            \"bankAccountId\":{{bankAccountId2_sens}}\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/admin/orders/bind-owners-to-order",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"admin",
														"orders",
														"bind-owners-to-order"
													]
												}
											},
											"response": []
										},
										{
											"name": "3.4 GoIP Out: № карты в смс совпадает с № карты, сумма не совпадает",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(1);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 2000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    var bank_account_admin = response.json().data[1].amount\r",
															"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    });\r",
															"    console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"-100.00UAH, Perekaz koshtiv Perekaz za nomerom kartky, UKR, Kartka {{owner_sens_card1}}, {{dateShort}} {{currentTime}}. Balans: {{bank_account_balance}}UAH Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "3.5 Получить данные владельца",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"const host = pm.environment.get(\"host\");\r",
															"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"//5-утрата доверия\r",
															"var status = jsonData.data[0].status.id;\r",
															"pm.test(\"Owner should be blocked to 5\", function () {\r",
															"    pm.expect(status).to.eql(5);\r",
															"});\r",
															"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
															"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
															"\r",
															"console.log(\"owner status:\", status);\r",
															"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
															"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
															"\r",
															"if (status !== 1) {\r",
															"    var getRequest = {\r",
															"        url: `${host}/api/admin/owners/updateField`,\r",
															"        method: 'POST',\r",
															"        header: {\r",
															"            'Authorization': `Bearer ${tokenAdmin}`,\r",
															"            'Content-Type': 'application/json',\r",
															"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
															"        },\r",
															"        body: {\r",
															"            mode: 'raw',\r",
															"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
															"        }\r",
															"    };\r",
															"\r",
															"    setTimeout(() => {\r",
															"        pm.sendRequest(getRequest, (error, response) => {\r",
															"            if (error) {\r",
															"                console.error(\"Error in response:\", error);\r",
															"            }\r",
															"\r",
															"            pm.test('Owners data response should be 200', () => {\r",
															"                pm.expect(error).to.be.null;\r",
															"                pm.expect(response).to.have.status(200);\r",
															"                console.log(\"Owner status was changed to 1\")\r",
															"            });\r",
															"        });\r",
															"    }, 500);\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId_sens}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"admin",
														"owners",
														""
													],
													"query": [
														{
															"key": "ownerId",
															"value": "{{ownerId_sens}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "3.6 Входящие транзакции",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ownerId\":{{ownerId_sens}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/admin/owners/updateField",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"admin",
														"owners",
														"updateField"
													]
												}
											},
											"response": []
										},
										{
											"name": "3.7 Исходящие транзакции",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ownerId\": {{ownerId_sens}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/admin/owners/updateField",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"admin",
														"owners",
														"updateField"
													]
												}
											},
											"response": []
										},
										{
											"name": "4 GoIP Out: № карты в смс отсутствует у владельца",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(1);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 2000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    var bank_account_admin = response.json().data[1].amount\r",
															"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"        pm.expect(bank_account_admin).not.to.equal(bank_account_balance)\r",
															"    });\r",
															"    console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"-{{transaction_sum}}UAH, Perekaz koshtiv Perekaz za nomerom kartky, UKR, Kartka 4102***5241, {{dateShort}} {{currentTime}}. Balans: {{bank_account_balance}}UAH Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "5 GoIP Out: № карты в смс не совпадает с №карты , с которой был платеж",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(4);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    var bank_account_admin = response.json().data[1].amount\r",
															"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    });\r",
															"    console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 5000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"-{{transaction_sum}}UAH, Perekaz koshtiv Perekaz za nomerom kartky, UKR, Kartka {{owner_sens_card2}}, {{dateShort}} {{currentTime}}. Balans: {{bank_account_balance}}UAH Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "6.1 Создание входящей транзакции GoIP",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();\r",
															"pm.environment.set(\"transaction_Id\", jsonData.data.id);\r",
															"console.log(\"transaction_Id: \", jsonData.data.id)\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var transaction_sum = Math.floor(1000 + Math.random() * 9000) + 0.25\r",
															"console.log(\"transaction_sum_in: \",transaction_sum)\r",
															"pm.environment.set(\"transaction_sum\", transaction_sum);\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenTestMT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"transactionId\": \"{{$guid}}\",\n    \"amount\": \"{{transaction_sum}}\",\n    // \"amount\": \"727\",\n    \"bank\": \"57\",\n    \"customerName\": \"{{$randomFullName}}\",\n    \"customerIp\": \"{{$randomIP}}\",\n    \"customerUserId\":\"123001\",  // приоритет по созданию заявки\n    \"currencyCode\": \"UAH\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/v2/order/in",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"v2",
														"order",
														"in"
													]
												}
											},
											"response": []
										},
										{
											"name": "6.2 GoIP Out: № карты в смс совпадает с №карты",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(1);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 2000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    var bank_account_admin = response.json().data[1].amount\r",
															"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    });\r",
															"    console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"-{{transaction_sum}}UAH, Perekaz koshtiv Perekaz za nomerom kartky, UKR, Kartka {{owner_sens_card1}}, {{dateShort}} {{currentTime}}. Balans: {{bank_account_balance}}UAH Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										},
										{
											"name": "6.3 Получить данные владельца",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"const ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"const host = pm.environment.get(\"host\");\r",
															"const tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"//5-утрата доверия\r",
															"var status = jsonData.data[0].status.id;\r",
															"pm.test(\"Owner should be blocked to 5\", function () {\r",
															"    pm.expect(status).to.eql(5);\r",
															"});\r",
															"var incommingTransactionsIsAllowed = jsonData.data[0].incommingTransactionsIsAllowed;\r",
															"var outcommingTransactionsIsAllowed = jsonData.data[0].outcommingTransactionsIsAllowed;\r",
															"\r",
															"console.log(\"owner status:\", status);\r",
															"console.log(\"incommingTransactionsIsAllowed:\", incommingTransactionsIsAllowed);\r",
															"console.log(\"outcommingTransactionsIsAllowed:\", outcommingTransactionsIsAllowed);\r",
															"\r",
															"if (status !== 1) {\r",
															"    var getRequest = {\r",
															"        url: `${host}/api/admin/owners/updateField`,\r",
															"        method: 'POST',\r",
															"        header: {\r",
															"            'Authorization': `Bearer ${tokenAdmin}`,\r",
															"            'Content-Type': 'application/json',\r",
															"            'User-Agent': 'PostmanRuntime/7.37.3'\r",
															"        },\r",
															"        body: {\r",
															"            mode: 'raw',\r",
															"            raw: JSON.stringify({ \"ownerId\": ownerId, \"status\": 1 })\r",
															"        }\r",
															"    };\r",
															"\r",
															"    setTimeout(() => {\r",
															"        pm.sendRequest(getRequest, (error, response) => {\r",
															"            if (error) {\r",
															"                console.error(\"Error in response:\", error);\r",
															"            }\r",
															"\r",
															"            pm.test('Owners data response should be 200', () => {\r",
															"                pm.expect(error).to.be.null;\r",
															"                pm.expect(response).to.have.status(200);\r",
															"                console.log(\"Owner status was changed to 1\")\r",
															"            });\r",
															"        });\r",
															"    }, 500);\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/api/admin/owners/?ownerId={{ownerId_sens}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"admin",
														"owners",
														""
													],
													"query": [
														{
															"key": "ownerId",
															"value": "{{ownerId_sens}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "6.4 Входящие транзакции",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ownerId\":{{ownerId_sens}},\r\n    \"incommingTransactionsIsAllowed\":true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/admin/owners/updateField",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"admin",
														"owners",
														"updateField"
													]
												}
											},
											"response": []
										},
										{
											"name": "6.5 Исходящие транзакции",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ownerId\": {{ownerId_sens}},\r\n    \"outcommingTransactionsIsAllowed\":true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/admin/owners/updateField",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"admin",
														"owners",
														"updateField"
													]
												}
											},
											"response": []
										},
										{
											"name": "6.6 GoIP In: № карты в смс совпадает с №карты, на которую был платеж",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function formatDate() {\r",
															"    // \r",
															"\tconst date = new Date();\r",
															"    const hours = String(date.getHours()).padStart(2, '0');\r",
															"    const minutes = String(date.getMinutes()).padStart(2, '0');\r",
															"    const curTime = `${hours}:${minutes}`;\r",
															"    //\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const year = date.getFullYear();\r",
															"    const shortYear = String(year).slice(-2);\r",
															"\r",
															"    // Форматируем дату\r",
															"    const dateShort = `${day}.${month}.${shortYear}`;\r",
															"    const dateLong = `${day}.${month}.${year}`;\r",
															"\r",
															"    return { dateShort, dateLong, curTime };\r",
															"}\r",
															"const { dateShort, dateLong, curTime } = formatDate();\r",
															"//\r",
															"pm.environment.set(\"currentTime\", curTime);\r",
															"pm.environment.set(\"dateShort\", dateShort);\r",
															"pm.environment.set(\"dateLong\", dateLong);\r",
															"\r",
															"\r",
															"var bank_account_balance = Math.floor(Math.random() * 90000) + 0.25\r",
															"pm.environment.set(\"bank_account_balance\", bank_account_balance);\r",
															"console.log(\"SMS bank account balance:\", bank_account_balance)\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"console.log(\"SMS transaction sum:\", transaction_sum)\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var host = pm.collectionVariables.get(\"host\");\r",
															"var tokenAdmin = pm.environment.get(\"tokenAdmin\");\r",
															"var tokenTestMT = pm.environment.get(\"tokenTestMT\");\r",
															"var ownerId = pm.environment.get(\"ownerId_sens\");\r",
															"var transaction_id = pm.environment.get(\"transaction_Id\");\r",
															"var transaction_sum = pm.environment.get(\"transaction_sum\");\r",
															"//\r",
															"//\r",
															"function formatDate(date) {\r",
															"    const year = date.getFullYear();\r",
															"    const month = String(date.getMonth() + 1).padStart(2, '0');\r",
															"    const day = String(date.getDate()).padStart(2, '0');\r",
															"    return `${year}-${month}-${day}`;\r",
															"}\r",
															"const currentDate = new Date();\r",
															"const nextCurrentDate = new Date(currentDate);\r",
															"nextCurrentDate.setDate(currentDate.getDate() + 1);\r",
															"\r",
															"let current_date = formatDate(currentDate);\r",
															"let nextCurrent_date = formatDate(nextCurrentDate);\r",
															"//\r",
															"// получаем транзакции по владельцу\r",
															"var getRequest1 = {\r",
															"  url: `${host}/api/v2/orders?from=${current_date}&limit=100&to=${nextCurrent_date}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenTestMT}`\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest1, (error, response1) => {\r",
															"    pm.test('Transaction data response should be 200', () => {\r",
															"        pm.expect(response1.code).to.equal(200);\r",
															"    });\r",
															"    // проверяем наличие транзакции\r",
															"    const responseData = response1.json();\r",
															"    const foundItem = responseData.data.find(item => item.id === transaction_id);\r",
															"    pm.test(`Проверка наличия транзакции с id ${transaction_id}`, () => {\r",
															"        pm.expect(transaction_id).to.exist;\r",
															"    });\r",
															"    if (foundItem) {\r",
															"        // Если найден, проверяем его статус\r",
															"        pm.test(`Статус для транзакции id ${transaction_id}`, () => {\r",
															"            const statusId = foundItem.status.id;\r",
															"            console.log(`Status ID for transaction ID ${transaction_id}: ${statusId}`);\r",
															"            pm.expect(statusId).to.be.equal(2);\r",
															"        });\r",
															"        pm.test(`Суммы в заявке и транзакции id ${transaction_id} совпадают`, () => {\r",
															"            const transactionAmount = foundItem.amount;\r",
															"            pm.expect(transactionAmount).to.equal(transaction_sum);\r",
															"            console.log(`Amount of transaction: ${transactionAmount}`);\r",
															"            console.log(`Value of transaction: ${transaction_sum}`);\r",
															"        });\r",
															"\r",
															"    } else {\r",
															"        console.log(`Транзакция с id ${transaction_id} не найдена`);\r",
															"    }\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															"// получаем данные по владельцу, его фактический баланс\r",
															"var getRequest = {\r",
															"  url: `${host}/api/admin/bank-accounts/?ownerId=${ownerId}`,\r",
															"  method: 'GET',\r",
															"  header: {\r",
															"    'Authorization': `Bearer ${tokenAdmin}`\r",
															"  },\r",
															"  body: {\r",
															"  }\r",
															"};\r",
															"setTimeout(() => {\r",
															"    pm.sendRequest(getRequest, (error, response) => {\r",
															"        if (error) {\r",
															"        console.log(error);\r",
															"    }\r",
															"    //\r",
															"    pm.test('Owners data response should be 200', () => {\r",
															"        pm.expect(error).to.equal(null);\r",
															"        pm.expect(response).to.have.property('code', 200);\r",
															"        pm.expect(response).to.have.property('status', 'OK');\r",
															"    });\r",
															"    // берем первый счет\r",
															"    var bank_account_admin = response.json().data[1].amount\r",
															"    var bank_account_balance=  pm.environment.get(\"bank_account_balance\");\r",
															"    pm.test(`Баланс в смс и аккаунте владельца id ${ownerId} совпадают`, () => {\r",
															"        pm.expect(bank_account_admin).to.equal(bank_account_balance)\r",
															"    });\r",
															"    console.log(\"bank_account_admin\", bank_account_admin)\r",
															"    console.log(\"bank_account_balance\", bank_account_balance)\r",
															"    });\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"goip_line\":\"{{goip_line_sens}}\",\r\n\t//\r\n    \"content\":\"Kartka {{owner_sens_card1}} uspishna operaciya +{{transaction_sum}}UAH {{dateShort}} {{currentTime}} SHLYAHOVA, TETYANA, UA Balans:{{bank_account_balance}}UAH Korysne tut: https://sense.top/INFO\",\r\n    //\r\n    \"from_number\":\"Sense Bank\",\r\n    \"recv_time\":\"{{$timestamp}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/goip/checkSms",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"goip",
														"checkSms"
													]
												}
											},
											"response": []
										}
									],
									"description": "StartFragment\n\n\\-55.50UAH, Perekaz koshtiv Perekaz za nomerom kartky, UKR, Kartka 4102**\\*5241, 26.09.23 11:01. Balans: 1744.44UAH Korysne tut: [https://sense.top/INFO](https://sense.top/INFO)\n\nEndFragment"
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{tokenAdmin}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "https://websitewizard.ru",
			"type": "string"
		},
		{
			"value": "",
			"type": "string",
			"disabled": true
		}
	]
}